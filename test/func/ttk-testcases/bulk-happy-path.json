{
  "name": "Happy Path",
  "test_cases": [
    {
      "id": 1,
      "name": "TC-BHP1. Happy Path",
      "fileInfo": {
        "path": "ttk-testcases/bulk-happy-path.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateUUID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": false,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "16135551212"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "56781234"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "123.45",
                "note": "fspsuccess"
              }
            ]
          },
          "url": "http://payer-sdk-api-svc:4001",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(1)"
                ]
              },
              {
                "id": 3,
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": 4,
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": 5,
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": 6,
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": 7,
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+120000)).toISOString()"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.bulkTransactionId = callback.body.bulkTransactionId;"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$prev.1.callback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 3,
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 4,
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$prev.1.callback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(1)"
                ]
              },
              {
                "id": 3,
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": 4,
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": 5,
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": 6,
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": 7,
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 8,
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 9,
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": 10,
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": 11,
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "TC-BHP2. When the incoming request has bulk expiration in the past, Then the PUT response should have error details of the failure",
      "fileInfo": {
        "path": "ttk-testcases/bulk-happy-path.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateUUID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "16135551212"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              }
            ]
          },
          "url": "http://payer-sdk-api-svc:4001",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.individualTransferResults.length).to.equal(3)"
                ]
              },
              {
                "id": 3,
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()-5000)).toISOString()",
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptPartyCallback = await inboundEvent.getMessage('acceptPartyCallback')",
                "console.log(acceptPartyCallback);",
                "",
                "environment.bulkTransactionId = acceptPartyCallback.body.bulkTransactionId;",
                "",
                "environment.acceptPartyCallback = acceptPartyCallback;"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[2].transactionId}",
                "acceptParty": false
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": 3,
                "description": "Check response has quote result for first transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 4,
                "description": "Check response has ilpPacket and condition for first transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 5,
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('acceptQuoteCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptQuoteCallback = await inboundEvent.getMessage('acceptQuoteCallback')",
                "",
                "console.log(acceptQuoteCallback)",
                "",
                "environment.acceptQuoteCallback = acceptQuoteCallback;"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": false
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults.length).to.equal(1)"
                ]
              },
              {
                "id": 3,
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": 4,
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": 5,
                "description": "Check response has quote result",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 6,
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 7,
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": 8,
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": 9,
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(environment.transfersCallback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('transfersCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const transfersCallback = await inboundEvent.getMessage('transfersCallback')",
                "",
                "console.log(transfersCallback)",
                "",
                "environment.transfersCallback = transfersCallback;"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "TC-BHP3. When the incoming request has a format issue that fails schema validation, Then the return code should be 400 instead of 202",
      "fileInfo": {
        "path": "ttk-testcases/bulk-happy-path.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateUUID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "DOESNOTEXIST",
                "partyIdentifier": "16135551212"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "DOESNOTEXIST",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "receiverfsphas2ids"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              }
            ]
          },
          "url": "http://payer-sdk-api-svc:4001",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(400)",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "Check response has statusText with value Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": 3,
                "description": "Check response body message should be must be equal to one of the allowed values",
                "exec": [
                  "expect(response.body.message).to.equal('must be equal to one of the allowed values')"
                ]
              },
              {
                "id": 4,
                "description": "Check response body status code to be 400",
                "exec": [
                  "expect(response.body.statusCode).to.equal(400)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()-5000)).toISOString()",
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptPartyCallback = await inboundEvent.getMessage('acceptPartyCallback')",
                "console.log(acceptPartyCallback);",
                "",
                "environment.bulkTransactionId = acceptPartyCallback.body.bulkTransactionId;",
                "",
                "environment.acceptPartyCallback = acceptPartyCallback;"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "TC-BHP4. When there are 4 transfers in the bulk request 2 of which that have the same receiver fsp id and the others has a different receiver fsp id and acceptParty is true for all the transfers, Then the PUT response should have details of all the 4 transfers.",
      "fileInfo": {
        "path": "ttk-testcases/bulk-happy-path.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateUUID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "2016-05-24T08:38:08.699-04:00"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "16135551212"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456789",
                    "fspId": "ttksim2"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456007",
                    "fspId": "ttksim2"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc3",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456007",
                    "fspId": "ttksim3"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc4",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "123456007",
                    "fspId": "ttksim3"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              }
            ]
          },
          "url": "http://payer-sdk-api-svc:4001",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": 3,
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptPartyCallback = await inboundEvent.getMessage('acceptPartyCallback')",
                "console.log(acceptPartyCallback);",
                "",
                "environment.bulkTransactionId = acceptPartyCallback.body.bulkTransactionId;",
                "",
                "environment.acceptPartyCallback = acceptPartyCallback;",
                "",
                "environment.individualTransferId1 = acceptPartyCallback.body.individualTransferResults[0].transactionId;",
                "",
                "environment.individualTransferId2 = acceptPartyCallback.body.individualTransferResults[1].transactionId;"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[2].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc789",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[3].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": 3,
                "description": "Check response has quote result for first transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 4,
                "description": "Check response has ilpPacket and condition for first transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 5,
                "description": "Check response has quote result for second transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[1].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 6,
                "description": "Check response has ilpPacket and condition for second transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[1].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[1].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 7,
                "description": "Check response has quote result for third transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[2].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 8,
                "description": "Check response has ilpPacket and condition for third transfer",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[2].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults[2].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 9,
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('acceptQuoteCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptQuoteCallback = await inboundEvent.getMessage('acceptQuoteCallback')",
                "",
                "console.log(acceptQuoteCallback)",
                "",
                "environment.acceptQuoteCallback = acceptQuoteCallback;"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.1.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.1.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.1.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[2].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[3].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": 3,
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": 4,
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": 5,
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": 6,
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": 7,
                "description": "Check response has quote result",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": 8,
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": 9,
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": 10,
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": 11,
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(environment.transfersCallback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('transfersCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const transfersCallback = await inboundEvent.getMessage('transfersCallback')",
                "",
                "console.log(transfersCallback)",
                "",
                "environment.transfersCallback = transfersCallback;"
              ]
            }
          }
        }
      ]
    }
  ]
}