openapi: 3.0.1
info:
  title: Mojaloop SDK Outbound Scheme Adapter API
  description: >
    Specification for the Mojaloop SDK Scheme Adapter Outbound Transfers API


    This API can be used by DFSP backends to simplify the process of sending
    funds to other parties within a Mojaloop scheme.


    Please see other documentation on
    https://github.com/mojaloop/sdk-scheme-adapter for more information.


    **Note on terminology:** The term "Switch" is equal to the term "Hub", and
    the term "FSP" is equal to the term "DFSP".
  license:
    name: Apache License Version 2.0, January 2004
    url: https://github.com/mojaloop/documentation/blob/master/LICENSE.md
  version: 1.0.0
paths:
  /:
    get:
      summary: Health check endpoint
      description: >-
        This endpoint allows a user of the SDK scheme adapter to check the
        outbound transfers service is listening.
      tags:
        - Health
      responses:
        '200':
          description: >-
            Returns empty body if the scheme adapter outbound transfers service
            is running.
  /transfers:
    post:
      summary: Sends money from one account to another
      description: >
        The HTTP request `POST /transfers` is used to request the movement of
        funds from payer DFSP to payee DFSP.

        The underlying Mojaloop API has three stages for money transfer:

          1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
          2. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
          3. Transfer. The enactment of the previously agreed "contract"

        This method has several modes of operation.

        - If the configuration variables `AUTO_ACCEPT_PARTIES` is set to
        `"false"` this method will terminate when the payee party has been
        resolved and return the payee party details.
          If the payee wishes to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the payee party) is required to continue the operation.
          The scheme adapter will then proceed with quotation stage...

        - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"`
        this method will terminate and return the quotation when it has been
        received from the payee DFSP.
          If the payee wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        If the configuration variables `AUTO_ACCEPT_PARTIES` and
        `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block
        until all three transfer stages are complete. Upon completion it will
        return the entire set of transfer details received during the operation.


        Combinations of settings for `AUTO_ACCEPT...` configuration variables
        allow the scheme adapter user to decide which mode of operation best
        suits their use cases. i.e. the scheme adapter can be configured to
        "break" the three stage transfer at these points in order to execute
        backend logic such as party verification, quoted fees assessments etc...
      tags:
        - Transfers
      requestBody:
        description: Transfer request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_70
                - homeTransactionId
                - from
                - to
                - amountType
                - currency
                - amount
                - transactionType
              properties: &ref_71
                homeTransactionId:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                from:
                  type: object
                  required: &ref_0
                    - idType
                    - idValue
                  properties: &ref_1
                    type:
                      title: TransactionInitiatorType
                      type: string
                      enum: &ref_52
                        - CONSUMER
                        - AGENT
                        - BUSINESS
                        - DEVICE
                      description: >-
                        Below are the allowed values for the enumeration.

                        - CONSUMER - Consumer is the initiator of the
                        transaction.

                        - AGENT - Agent is the initiator of the transaction.

                        - BUSINESS - Business is the initiator of the
                        transaction.

                        - DEVICE - Device is the initiator of the transaction.
                      example: CONSUMER
                    idType:
                      title: PartyIdType
                      type: string
                      enum: &ref_23
                        - MSISDN
                        - EMAIL
                        - PERSONAL_ID
                        - BUSINESS
                        - DEVICE
                        - ACCOUNT_ID
                        - IBAN
                        - ALIAS
                      description: >-
                        Below are the allowed values for the enumeration.

                        - MSISDN - An MSISDN (Mobile Station International
                        Subscriber Directory Number, that is, the phone number)
                        is used as reference to a participant. The MSISDN
                        identifier should be in international format according
                        to the [ITU-T E.164
                        standard](https://www.itu.int/rec/T-REC-E.164/en).
                        Optionally, the MSISDN may be prefixed by a single plus
                        sign, indicating the international prefix.

                        - EMAIL - An email is used as reference to a
                        participant. The format of the email should be according
                        to the informational [RFC
                        3696](https://tools.ietf.org/html/rfc3696).

                        - PERSONAL_ID - A personal identifier is used as
                        reference to a participant. Examples of personal
                        identification are passport number, birth certificate
                        number, and national registration number. The identifier
                        number is added in the PartyIdentifier element. The
                        personal identifier type is added in the
                        PartySubIdOrType element.

                        - BUSINESS - A specific Business (for example, an
                        organization or a company) is used as reference to a
                        participant. The BUSINESS identifier can be in any
                        format. To make a transaction connected to a specific
                        username or bill number in a Business, the
                        PartySubIdOrType element should be used.

                        - DEVICE - A specific device (for example, a POS or ATM)
                        ID connected to a specific business or organization is
                        used as reference to a Party. For referencing a specific
                        device under a specific business or organization, use
                        the PartySubIdOrType element.

                        - ACCOUNT_ID - A bank account number or FSP account ID
                        should be used as reference to a participant. The
                        ACCOUNT_ID identifier can be in any format, as formats
                        can greatly differ depending on country and FSP.

                        - IBAN - A bank account number or FSP account ID is used
                        as reference to a participant. The IBAN identifier can
                        consist of up to 34 alphanumeric characters and should
                        be entered without whitespace.

                        - ALIAS An alias is used as reference to a participant.
                        The alias should be created in the FSP as an alternative
                        reference to an account owner. Another example of an
                        alias is a username in the FSP system. The ALIAS
                        identifier can be in any format. It is also possible to
                        use the PartySubIdOrType element for identifying an
                        account under an Alias defined by the PartyIdentifier.
                    idValue:
                      title: PartyIdentifier
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Identifier of the Party.
                      example: '16135551212'
                    idSubValue:
                      title: PartySubIdOrType
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: >-
                        Either a sub-identifier of a PartyIdentifier, or a
                        sub-type of the PartyIdType, normally a
                        PersonalIdentifierType.
                    displayName:
                      title: Name
                      type: string
                      pattern: ^(?!\s*$)[\w .,'-]{1,128}$
                      description: >-
                        The API data type Name is a JSON String, restricted by a
                        regular expression to avoid characters which are
                        generally not used in a name.


                        Regular Expression - The regular expression for
                        restricting the Name type is "^(?!\s*$)[\w
                        .,'-]{1,128}$". The restriction does not allow a string
                        consisting of whitespace only, all Unicode characters
                        are allowed, as well as the period (.) (apostrophe (‘),
                        dash (-), comma (,) and space characters ( ).


                        **Note:** In some programming languages, Unicode support
                        must be specifically enabled. For example, if Java is
                        used, the flag UNICODE_CHARACTER_CLASS must be enabled
                        to allow Unicode characters.
                    firstName:
                      title: FirstName
                      type: string
                      minLength: 1
                      maxLength: 128
                      pattern: >-
                        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                        .,''-]{1,128}$
                      description: First name of the Party (Name Type).
                      example: Henrik
                    middleName:
                      title: MiddleName
                      type: string
                      minLength: 1
                      maxLength: 128
                      pattern: >-
                        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                        .,''-]{1,128}$
                      description: Middle name of the Party (Name Type).
                      example: Johannes
                    lastName:
                      title: LastName
                      type: string
                      minLength: 1
                      maxLength: 128
                      pattern: >-
                        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                        .,''-]{1,128}$
                      description: Last name of the Party (Name Type).
                      example: Karlsson
                    dateOfBirth:
                      title: DateofBirth (type Date)
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
                      description: Date of Birth of the Party.
                      example: '1966-06-16'
                    merchantClassificationCode:
                      title: MerchantClassificationCode
                      type: string
                      pattern: ^[\d]{1,4}$
                      description: >-
                        A limited set of pre-defined numbers. This list would be
                        a limited set of numbers identifying a set of popular
                        merchant types like School Fees, Pubs and Restaurants,
                        Groceries, etc.
                    fspId:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    extensionList:
                      type: array
                      items: &ref_2
                        title: Extension
                        type: object
                        description: Data model for the complex type Extension.
                        properties: &ref_8
                          key:
                            title: ExtensionKey
                            type: string
                            minLength: 1
                            maxLength: 32
                            description: Extension key.
                          value:
                            title: ExtensionValue
                            type: string
                            minLength: 1
                            maxLength: 128
                            description: Extension value.
                        required: &ref_9
                          - key
                          - value
                      minItems: 0
                      maxItems: 16
                to:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                amountType:
                  title: AmountType
                  type: string
                  enum: &ref_3
                    - SEND
                    - RECEIVE
                  description: >-
                    Below are the allowed values for the enumeration AmountType.

                    - SEND - Amount the Payer would like to send, that is, the
                    amount that should be withdrawn from the Payer account
                    including any fees.

                    - RECEIVE - Amount the Payer would like the Payee to
                    receive, that is, the amount that should be sent to the
                    receiver exclusive of any fees.
                  example: RECEIVE
                currency:
                  title: Currency
                  description: >-
                    The currency codes defined in [ISO
                    4217](https://www.iso.org/iso-4217-currency-codes.html) as
                    three-letter alphabetic codes are used as the standard
                    naming representation for currencies.
                  type: string
                  minLength: 3
                  maxLength: 3
                  enum: &ref_4
                    - AED
                    - AFN
                    - ALL
                    - AMD
                    - ANG
                    - AOA
                    - ARS
                    - AUD
                    - AWG
                    - AZN
                    - BAM
                    - BBD
                    - BDT
                    - BGN
                    - BHD
                    - BIF
                    - BMD
                    - BND
                    - BOB
                    - BRL
                    - BSD
                    - BTN
                    - BWP
                    - BYN
                    - BZD
                    - CAD
                    - CDF
                    - CHF
                    - CLP
                    - CNY
                    - COP
                    - CRC
                    - CUC
                    - CUP
                    - CVE
                    - CZK
                    - DJF
                    - DKK
                    - DOP
                    - DZD
                    - EGP
                    - ERN
                    - ETB
                    - EUR
                    - FJD
                    - FKP
                    - GBP
                    - GEL
                    - GGP
                    - GHS
                    - GIP
                    - GMD
                    - GNF
                    - GTQ
                    - GYD
                    - HKD
                    - HNL
                    - HRK
                    - HTG
                    - HUF
                    - IDR
                    - ILS
                    - IMP
                    - INR
                    - IQD
                    - IRR
                    - ISK
                    - JEP
                    - JMD
                    - JOD
                    - JPY
                    - KES
                    - KGS
                    - KHR
                    - KMF
                    - KPW
                    - KRW
                    - KWD
                    - KYD
                    - KZT
                    - LAK
                    - LBP
                    - LKR
                    - LRD
                    - LSL
                    - LYD
                    - MAD
                    - MDL
                    - MGA
                    - MKD
                    - MMK
                    - MNT
                    - MOP
                    - MRO
                    - MUR
                    - MVR
                    - MWK
                    - MXN
                    - MYR
                    - MZN
                    - NAD
                    - NGN
                    - NIO
                    - NOK
                    - NPR
                    - NZD
                    - OMR
                    - PAB
                    - PEN
                    - PGK
                    - PHP
                    - PKR
                    - PLN
                    - PYG
                    - QAR
                    - RON
                    - RSD
                    - RUB
                    - RWF
                    - SAR
                    - SBD
                    - SCR
                    - SDG
                    - SEK
                    - SGD
                    - SHP
                    - SLL
                    - SOS
                    - SPL
                    - SRD
                    - STD
                    - SVC
                    - SYP
                    - SZL
                    - THB
                    - TJS
                    - TMT
                    - TND
                    - TOP
                    - TRY
                    - TTD
                    - TVD
                    - TWD
                    - TZS
                    - UAH
                    - UGX
                    - USD
                    - UYU
                    - UZS
                    - VEF
                    - VND
                    - VUV
                    - WST
                    - XAF
                    - XCD
                    - XDR
                    - XOF
                    - XPF
                    - XTS
                    - XXX
                    - YER
                    - ZAR
                    - ZMW
                    - ZWD
                amount:
                  title: Amount
                  type: string
                  pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                  description: >-
                    The API data type Amount is a JSON String in a canonical
                    format that is restricted by a regular expression for
                    interoperability reasons. This pattern does not allow any
                    trailing zeroes at all, but allows an amount without a minor
                    currency unit. It also only allows four digits in the minor
                    currency unit; a negative value is not allowed. Using more
                    than 18 digits in the major currency unit is not allowed.
                  example: '123.45'
                transactionType:
                  title: transferTransactionType
                  type: string
                  enum: &ref_5
                    - TRANSFER
                  description: Type of transaction.
                note:
                  title: Note
                  type: string
                  minLength: 1
                  maxLength: 128
                  description: Memo assigned to transaction.
                  example: Note sent to Payee.
                quoteRequestExtensions:
                  type: array
                  items: *ref_2
                  minItems: 0
                  maxItems: 16
                transferRequestExtensions:
                  type: array
                  items: *ref_2
                  minItems: 0
                  maxItems: 16
                skipPartyLookup:
                  description: >-
                    Set to true if supplying an FSPID for the payee party and no
                    party resolution is needed. This may be useful is a previous
                    party resolution has been performed.
                  type: boolean
        required: true
      responses:
        '200':
          description: Transfer completed successfully
          content: &ref_15
            application/json:
              schema:
                type: object
                required: &ref_12
                  - homeTransactionId
                  - from
                  - to
                  - amountType
                  - currency
                  - amount
                  - transactionType
                properties: &ref_13
                  transferId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  homeTransactionId:
                    type: string
                    description: >-
                      Transaction ID from the DFSP backend, used to reconcile
                      transactions between the Switch and DFSP backend systems.
                  from:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  to:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  amountType:
                    title: AmountType
                    type: string
                    enum: *ref_3
                    description: >-
                      Below are the allowed values for the enumeration
                      AmountType.

                      - SEND - Amount the Payer would like to send, that is, the
                      amount that should be withdrawn from the Payer account
                      including any fees.

                      - RECEIVE - Amount the Payer would like the Payee to
                      receive, that is, the amount that should be sent to the
                      receiver exclusive of any fees.
                    example: RECEIVE
                  currency:
                    title: Currency
                    description: >-
                      The currency codes defined in [ISO
                      4217](https://www.iso.org/iso-4217-currency-codes.html) as
                      three-letter alphabetic codes are used as the standard
                      naming representation for currencies.
                    type: string
                    minLength: 3
                    maxLength: 3
                    enum: *ref_4
                  amount:
                    title: Amount
                    type: string
                    pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                    description: >-
                      The API data type Amount is a JSON String in a canonical
                      format that is restricted by a regular expression for
                      interoperability reasons. This pattern does not allow any
                      trailing zeroes at all, but allows an amount without a
                      minor currency unit. It also only allows four digits in
                      the minor currency unit; a negative value is not allowed.
                      Using more than 18 digits in the major currency unit is
                      not allowed.
                    example: '123.45'
                  transactionType:
                    title: transferTransactionType
                    type: string
                    enum: *ref_5
                    description: Type of transaction.
                  note:
                    title: Note
                    type: string
                    minLength: 1
                    maxLength: 128
                    description: Memo assigned to transaction.
                    example: Note sent to Payee.
                  currentState:
                    type: string
                    enum: &ref_19
                      - ERROR_OCCURRED
                      - WAITING_FOR_PARTY_ACCEPTANCE
                      - WAITING_FOR_QUOTE_ACCEPTANCE
                      - COMPLETED
                  quoteId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  getPartiesResponse:
                    type: object
                    required:
                      - body
                    properties:
                      body:
                        type: object
                      headers:
                        type: object
                  quoteResponse:
                    type: object
                    required:
                      - body
                    properties:
                      body:
                        title: QuotesIDPutResponse
                        type: object
                        description: The object sent in the PUT /quotes/{ID} callback.
                        properties: &ref_56
                          transferAmount:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: &ref_6
                              currency:
                                title: Currency
                                description: >-
                                  The currency codes defined in [ISO
                                  4217](https://www.iso.org/iso-4217-currency-codes.html)
                                  as three-letter alphabetic codes are used as
                                  the standard naming representation for
                                  currencies.
                                type: string
                                minLength: 3
                                maxLength: 3
                                enum: *ref_4
                              amount:
                                title: Amount
                                type: string
                                pattern: >-
                                  ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                                description: >-
                                  The API data type Amount is a JSON String in a
                                  canonical format that is restricted by a
                                  regular expression for interoperability
                                  reasons. This pattern does not allow any
                                  trailing zeroes at all, but allows an amount
                                  without a minor currency unit. It also only
                                  allows four digits in the minor currency unit;
                                  a negative value is not allowed. Using more
                                  than 18 digits in the major currency unit is
                                  not allowed.
                                example: '123.45'
                            required: &ref_7
                              - currency
                              - amount
                          payeeReceiveAmount:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          payeeFspFee:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          payeeFspCommission:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          expiration:
                            title: DateTime
                            type: string
                            pattern: >-
                              ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                            description: >-
                              The API data type DateTime is a JSON String in a
                              lexical format that is restricted by a regular
                              expression for interoperability reasons. The
                              format is according to [ISO
                              8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                              expressed in a combined date, time and time zone
                              format. A more readable version of the format is
                              yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                              "2016-05-24T08:38:08.699-04:00",
                              "2016-05-24T08:38:08.699Z" (where Z indicates Zulu
                              time zone, same as UTC).
                            example: '2016-05-24T08:38:08.699-04:00'
                          geoCode:
                            title: GeoCode
                            type: object
                            description: >-
                              Data model for the complex type GeoCode. Indicates
                              the geographic location from where the transaction
                              was initiated.
                            properties: &ref_44
                              latitude:
                                title: Latitude
                                type: string
                                pattern: >-
                                  ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
                                description: >-
                                  The API data type Latitude is a JSON String in
                                  a lexical format that is restricted by a
                                  regular expression for interoperability
                                  reasons.
                                example: '+45.4215'
                              longitude:
                                title: Longitude
                                type: string
                                pattern: >-
                                  ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
                                description: >-
                                  The API data type Longitude is a JSON String
                                  in a lexical format that is restricted by a
                                  regular expression for interoperability
                                  reasons.
                                example: '+75.6972'
                            required: &ref_45
                              - latitude
                              - longitude
                          ilpPacket:
                            title: IlpPacket
                            type: string
                            pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
                            minLength: 1
                            maxLength: 32768
                            description: >-
                              Information for recipient (transport layer
                              information).
                            example: >-
                              AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                          condition:
                            title: IlpCondition
                            type: string
                            pattern: ^[A-Za-z0-9-_]{43}$
                            maxLength: 48
                            description: >-
                              Condition that must be attached to the transfer by
                              the Payer.
                          extensionList:
                            title: ExtensionList
                            type: object
                            description: >-
                              Data model for the complex type ExtensionList. An
                              optional list of extensions, specific to
                              deployment.
                            properties: &ref_10
                              extension:
                                type: array
                                items:
                                  title: Extension
                                  type: object
                                  description: Data model for the complex type Extension.
                                  properties: *ref_8
                                  required: *ref_9
                                minItems: 1
                                maxItems: 16
                                description: Number of Extension elements.
                            required: &ref_11
                              - extension
                        required: &ref_57
                          - transferAmount
                          - expiration
                          - ilpPacket
                          - condition
                      headers:
                        type: object
                  quoteResponseSource:
                    type: string
                    description: >
                      FSPID of the entity that supplied the quote response. This
                      may not be the same as the FSPID of the entity which owns
                      the end user account in the case of a FOREX transfer. i.e.
                      it may be a FOREX gateway.
                  fulfil:
                    type: object
                    required:
                      - body
                    properties:
                      body:
                        title: TransfersIDPutResponse
                        type: object
                        description: The object sent in the PUT /transfers/{ID} callback.
                        properties: &ref_20
                          fulfilment:
                            title: IlpFulfilment
                            type: string
                            pattern: ^[A-Za-z0-9-_]{43}$
                            maxLength: 48
                            description: >-
                              Fulfilment that must be attached to the transfer
                              by the Payee.
                            example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                          completedTimestamp:
                            title: DateTime
                            type: string
                            pattern: >-
                              ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                            description: >-
                              The API data type DateTime is a JSON String in a
                              lexical format that is restricted by a regular
                              expression for interoperability reasons. The
                              format is according to [ISO
                              8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                              expressed in a combined date, time and time zone
                              format. A more readable version of the format is
                              yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                              "2016-05-24T08:38:08.699-04:00",
                              "2016-05-24T08:38:08.699Z" (where Z indicates Zulu
                              time zone, same as UTC).
                            example: '2016-05-24T08:38:08.699-04:00'
                          transferState:
                            title: TransferState
                            type: string
                            enum: &ref_27
                              - RECEIVED
                              - RESERVED
                              - COMMITTED
                              - ABORTED
                            description: >-
                              Below are the allowed values for the enumeration.

                              - RECEIVED - Next ledger has received the
                              transfer.

                              - RESERVED - Next ledger has reserved the
                              transfer.

                              - COMMITTED - Next ledger has successfully
                              performed the transfer.

                              - ABORTED - Next ledger has aborted the transfer
                              due to a rejection or failure to perform the
                              transfer.
                            example: RESERVED
                          extensionList:
                            title: ExtensionList
                            type: object
                            description: >-
                              Data model for the complex type ExtensionList. An
                              optional list of extensions, specific to
                              deployment.
                            properties: *ref_10
                            required: *ref_11
                        required: &ref_21
                          - transferState
                      headers:
                        type: object
                  lastError:
                    description: >-
                      This object represents a Mojaloop API error received at
                      any time during the transfer process
                    type: object
                    properties: &ref_26
                      httpStatusCode:
                        type: integer
                        description: >-
                          The HTTP status code returned to the caller. This is
                          the same as the actual HTTP status code returned with
                          the response.
                      mojaloopError:
                        description: >-
                          If a transfer process results in an error callback
                          during the asynchronous Mojaloop API exchange, this
                          property will contain the underlying Mojaloop API
                          error object.
                        type: object
                        properties: &ref_36
                          errorInformation:
                            title: ErrorInformation
                            type: object
                            description: Data model for the complex type ErrorInformation.
                            properties: &ref_63
                              errorCode:
                                title: ErrorCode
                                type: string
                                pattern: ^[1-9]\d{3}$
                                description: >-
                                  The API data type ErrorCode is a JSON String
                                  of four characters, consisting of digits only.
                                  Negative numbers are not allowed. A leading
                                  zero is not allowed. Each error code in the
                                  API is a four-digit number, for example, 1234,
                                  where the first number (1 in the example)
                                  represents the high-level error category, the
                                  second number (2 in the example) represents
                                  the low-level error category, and the last two
                                  numbers (34 in the example) represent the
                                  specific error.
                                example: '5100'
                              errorDescription:
                                title: ErrorDescription
                                type: string
                                minLength: 1
                                maxLength: 128
                                description: Error description string.
                              extensionList:
                                title: ExtensionList
                                type: object
                                description: >-
                                  Data model for the complex type ExtensionList.
                                  An optional list of extensions, specific to
                                  deployment.
                                properties: *ref_10
                                required: *ref_11
                            required: &ref_64
                              - errorCode
                              - errorDescription
                  skipPartyLookup:
                    description: >-
                      Set to true if supplying an FSPID for the payee party and
                      no party resolution is needed. This may be useful is a
                      previous party resolution has been performed.
                    type: boolean
        '400':
          description: Malformed or missing required body, headers or parameters
          content: &ref_143
            application/json:
              schema:
                allOf: &ref_14
                  - type: object
                    properties: &ref_22
                      statusCode:
                        type: string
                        description: Error code as string.
                      message:
                        type: string
                        description: Error message text.
                  - type: object
                    required:
                      - transferState
                    properties:
                      transferState:
                        type: object
                        required: *ref_12
                        properties: *ref_13
        '500':
          description: An error occurred processing the transfer
          content: &ref_16
            application/json:
              schema:
                allOf: *ref_14
        '504':
          description: Timeout occurred processing the transfer
          content: &ref_17
            application/json:
              schema:
                allOf: *ref_14
  /transfers/{transferId}:
    put:
      summary: >-
        Continues a transfer that has paused at the quote stage in order to
        accept or reject payee party and/or quote
      description: >
        The HTTP request `PUT /transfers/{transferId}` is used to continue a
        transfer initiated via the `POST /transfers` method that has halted
        after party lookup and/or quotation stage.


        The request body should contain either the "acceptParty" or
        "acceptQuote" property set to `true` as required to continue the
        transfer.


        See the description of the `POST /transfers` HTTP method for more
        information on modes of transfer.
      tags:
        - Transfers
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: &ref_28
                    - acceptParty
                  properties: &ref_29
                    acceptParty:
                      type: boolean
                      enum:
                        - true
                        - false
                - type: object
                  required: &ref_32
                    - acceptQuote
                  properties: &ref_33
                    acceptQuote:
                      type: boolean
                      enum:
                        - true
                        - false
      parameters:
        - name: transferId
          in: path
          required: true
          schema: &ref_18
            title: CorrelationId
            type: string
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            description: >-
              Identifier that correlates all messages of the same sequence. The
              API data type UUID (Universally Unique Identifier) is a JSON
              String in canonical format, conforming to [RFC
              4122](https://tools.ietf.org/html/rfc4122), that is restricted by
              a regular expression for interoperability reasons. A UUID is
              always 36 characters long, 32 hexadecimal symbols and 4 dashes
              (‘-‘).
            example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >-
            Identifier of the transfer to continue as returned in the response
            to a `POST /transfers` request.
      responses:
        '200':
          description: Transfer completed successfully
          content: *ref_15
        '500':
          description: An error occurred processing the transfer
          content: *ref_16
        '504':
          description: Timeout occurred processing the transfer
          content: *ref_17
    get:
      summary: Retrieves information for a specific transfer
      description: >-
        The HTTP request `GET /transfers/{transferId}` is used to get
        information regarding a transfer created or requested earlier. The
        `{transferId}` in the URI should contain the `transferId` that was used
        for the creation of the transfer.
      tags:
        - Transfers
      parameters:
        - name: transferId
          in: path
          required: true
          schema: *ref_18
          description: >-
            Identifier of the transfer to continue as returned in the response
            to a `POST /transfers` request.
      responses:
        '200':
          description: Transfer information successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required: &ref_72
                  - transferId
                  - currentState
                  - fulfil
                properties: &ref_73
                  transferId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  currentState:
                    type: string
                    enum: *ref_19
                  fulfil:
                    type: object
                    required:
                      - body
                    properties:
                      body:
                        title: TransfersIDPutResponse
                        type: object
                        description: The object sent in the PUT /transfers/{ID} callback.
                        properties: *ref_20
                        required: *ref_21
                      headers:
                        type: object
        '500':
          description: An error occurred processing the transfer
          content:
            application/json:
              schema:
                type: object
                properties: *ref_22
  /bulkTransactions:
    post:
      summary: Sends money from one account to multiple accounts
      description: >
        The HTTP request `POST /bulkTransactions` is used to request the
        movement of funds from payer DFSP to payees' DFSP.
      tags:
        - BulkTransactions
      requestBody:
        description: Bulk transfer request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_88
                - bulkTransactionId
                - bulkHomeTransactionID
                - options
                - from
                - individualTransfers
              properties: &ref_89
                bulkHomeTransactionID:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                bulkTransactionId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                options:
                  type: object
                  required: &ref_80
                    - autoAcceptParty
                    - autoAcceptQuote
                    - bulkExpiration
                  properties: &ref_81
                    onlyValidateParty:
                      description: >-
                        Set to true if only party validation is required.  This
                        means the quotes and transfers will not run. This is
                        useful for only party resolution.
                      type: boolean
                    autoAcceptParty:
                      type: object
                      required: &ref_74
                        - enabled
                      properties: &ref_75
                        enabled:
                          type: boolean
                          enum:
                            - false
                            - true
                    autoAcceptQuote:
                      description: >-
                        Set to true if the quote response is accepted without
                        confirmation from the payer. The fees applied by the
                        payee will be acceptable to the payer abiding by the
                        limits set by optional 'perTransferFeeLimits' array.
                      type: object
                      oneOf:
                        - type: object
                          required: &ref_78
                            - enabled
                          properties: &ref_79
                            enabled:
                              type: boolean
                              enum:
                                - true
                                - false
                            perTransferFeeLimits:
                              type: array
                              minItems: 0
                              items:
                                type: object
                                required: &ref_76
                                  - currency
                                  - amount
                                properties: &ref_77
                                  currency:
                                    title: Currency
                                    description: >-
                                      The currency codes defined in [ISO
                                      4217](https://www.iso.org/iso-4217-currency-codes.html)
                                      as three-letter alphabetic codes are used
                                      as the standard naming representation for
                                      currencies.
                                    type: string
                                    minLength: 3
                                    maxLength: 3
                                    enum: *ref_4
                                  amount:
                                    title: Amount
                                    type: string
                                    pattern: >-
                                      ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                                    description: >-
                                      The API data type Amount is a JSON String
                                      in a canonical format that is restricted
                                      by a regular expression for
                                      interoperability reasons. This pattern
                                      does not allow any trailing zeroes at all,
                                      but allows an amount without a minor
                                      currency unit. It also only allows four
                                      digits in the minor currency unit; a
                                      negative value is not allowed. Using more
                                      than 18 digits in the major currency unit
                                      is not allowed.
                                    example: '123.45'
                    skipPartyLookup:
                      description: >-
                        Set to true if supplying an FSPID for the payee party
                        and no party resolution is needed. This may be useful if
                        a previous party resolution has been performed.
                      type: boolean
                    synchronous:
                      description: >-
                        Set to true if the bulkTransfer requests need be handled
                        synchronous. Otherwise the requests will be handled
                        asynchronously, meaning there will  be callbacks
                        whenever the processing is done
                      type: boolean
                    bulkExpiration:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                from:
                  title: Party
                  type: object
                  description: Data model for the complex type Party.
                  properties: &ref_24
                    partyIdInfo:
                      title: PartyIdInfo
                      type: object
                      description: >-
                        Data model for the complex type PartyIdInfo. An
                        ExtensionList element has been added to this reqeust in
                        version v1.1
                      properties: &ref_82
                        partyIdType:
                          title: PartyIdType
                          type: string
                          enum: *ref_23
                          description: >-
                            Below are the allowed values for the enumeration.

                            - MSISDN - An MSISDN (Mobile Station International
                            Subscriber Directory Number, that is, the phone
                            number) is used as reference to a participant. The
                            MSISDN identifier should be in international format
                            according to the [ITU-T E.164
                            standard](https://www.itu.int/rec/T-REC-E.164/en).
                            Optionally, the MSISDN may be prefixed by a single
                            plus sign, indicating the international prefix.

                            - EMAIL - An email is used as reference to a
                            participant. The format of the email should be
                            according to the informational [RFC
                            3696](https://tools.ietf.org/html/rfc3696).

                            - PERSONAL_ID - A personal identifier is used as
                            reference to a participant. Examples of personal
                            identification are passport number, birth
                            certificate number, and national registration
                            number. The identifier number is added in the
                            PartyIdentifier element. The personal identifier
                            type is added in the PartySubIdOrType element.

                            - BUSINESS - A specific Business (for example, an
                            organization or a company) is used as reference to a
                            participant. The BUSINESS identifier can be in any
                            format. To make a transaction connected to a
                            specific username or bill number in a Business, the
                            PartySubIdOrType element should be used.

                            - DEVICE - A specific device (for example, a POS or
                            ATM) ID connected to a specific business or
                            organization is used as reference to a Party. For
                            referencing a specific device under a specific
                            business or organization, use the PartySubIdOrType
                            element.

                            - ACCOUNT_ID - A bank account number or FSP account
                            ID should be used as reference to a participant. The
                            ACCOUNT_ID identifier can be in any format, as
                            formats can greatly differ depending on country and
                            FSP.

                            - IBAN - A bank account number or FSP account ID is
                            used as reference to a participant. The IBAN
                            identifier can consist of up to 34 alphanumeric
                            characters and should be entered without whitespace.

                            - ALIAS An alias is used as reference to a
                            participant. The alias should be created in the FSP
                            as an alternative reference to an account owner.
                            Another example of an alias is a username in the FSP
                            system. The ALIAS identifier can be in any format.
                            It is also possible to use the PartySubIdOrType
                            element for identifying an account under an Alias
                            defined by the PartyIdentifier.
                        partyIdentifier:
                          title: PartyIdentifier
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Identifier of the Party.
                          example: '16135551212'
                        partySubIdOrType:
                          title: PartySubIdOrType
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Either a sub-identifier of a PartyIdentifier, or a
                            sub-type of the PartyIdType, normally a
                            PersonalIdentifierType.
                        fspId:
                          title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                        extensionList:
                          title: ExtensionList
                          type: object
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          properties: *ref_10
                          required: *ref_11
                      required: &ref_83
                        - partyIdType
                        - partyIdentifier
                    merchantClassificationCode:
                      title: MerchantClassificationCode
                      type: string
                      pattern: ^[\d]{1,4}$
                      description: >-
                        A limited set of pre-defined numbers. This list would be
                        a limited set of numbers identifying a set of popular
                        merchant types like School Fees, Pubs and Restaurants,
                        Groceries, etc.
                    name:
                      title: PartyName
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Name of the Party. Could be a real name or a nickname.
                    personalInfo:
                      title: PartyPersonalInfo
                      type: object
                      description: Data model for the complex type PartyPersonalInfo.
                      properties: &ref_85
                        complexName:
                          title: PartyComplexName
                          type: object
                          description: Data model for the complex type PartyComplexName.
                          properties: &ref_84
                            firstName:
                              title: FirstName
                              type: string
                              minLength: 1
                              maxLength: 128
                              pattern: >-
                                ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                .,''-]{1,128}$
                              description: First name of the Party (Name Type).
                              example: Henrik
                            middleName:
                              title: MiddleName
                              type: string
                              minLength: 1
                              maxLength: 128
                              pattern: >-
                                ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                .,''-]{1,128}$
                              description: Middle name of the Party (Name Type).
                              example: Johannes
                            lastName:
                              title: LastName
                              type: string
                              minLength: 1
                              maxLength: 128
                              pattern: >-
                                ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                .,''-]{1,128}$
                              description: Last name of the Party (Name Type).
                              example: Karlsson
                        dateOfBirth:
                          title: DateofBirth (type Date)
                          type: string
                          pattern: >-
                            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
                          description: Date of Birth of the Party.
                          example: '1966-06-16'
                  required: &ref_25
                    - partyIdInfo
                individualTransfers:
                  description: List of individual transfers in a bulk transfer.
                  type: array
                  minItems: 1
                  items:
                    title: BulkTransactionIndividualTransfer
                    type: object
                    description: >-
                      Data model for the complex type
                      'bulkTransactionIndividualTransfer'.
                    properties: &ref_86
                      homeTransactionId:
                        type: string
                        description: >-
                          Transaction ID from the DFSP backend, used to
                          reconcile transactions between the Switch and DFSP
                          backend systems.
                      to:
                        title: Party
                        type: object
                        description: Data model for the complex type Party.
                        properties: *ref_24
                        required: *ref_25
                      reference:
                        description: Payer Loan reference
                        type: string
                      amountType:
                        title: AmountType
                        type: string
                        enum: *ref_3
                        description: >-
                          Below are the allowed values for the enumeration
                          AmountType.

                          - SEND - Amount the Payer would like to send, that is,
                          the amount that should be withdrawn from the Payer
                          account including any fees.

                          - RECEIVE - Amount the Payer would like the Payee to
                          receive, that is, the amount that should be sent to
                          the receiver exclusive of any fees.
                        example: RECEIVE
                      currency:
                        title: Currency
                        description: >-
                          The currency codes defined in [ISO
                          4217](https://www.iso.org/iso-4217-currency-codes.html)
                          as three-letter alphabetic codes are used as the
                          standard naming representation for currencies.
                        type: string
                        minLength: 3
                        maxLength: 3
                        enum: *ref_4
                      amount:
                        title: Amount
                        type: string
                        pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                        description: >-
                          The API data type Amount is a JSON String in a
                          canonical format that is restricted by a regular
                          expression for interoperability reasons. This pattern
                          does not allow any trailing zeroes at all, but allows
                          an amount without a minor currency unit. It also only
                          allows four digits in the minor currency unit; a
                          negative value is not allowed. Using more than 18
                          digits in the major currency unit is not allowed.
                        example: '123.45'
                      note:
                        title: Note
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Memo assigned to transaction.
                        example: Note sent to Payee.
                      quoteExtensions:
                        title: ExtensionList
                        type: object
                        description: >-
                          Data model for the complex type ExtensionList. An
                          optional list of extensions, specific to deployment.
                        properties: *ref_10
                        required: *ref_11
                      transferExtensions:
                        title: ExtensionList
                        type: object
                        description: >-
                          Data model for the complex type ExtensionList. An
                          optional list of extensions, specific to deployment.
                        properties: *ref_10
                        required: *ref_11
                      lastError:
                        type: object
                        description: >-
                          This object represents a Mojaloop API error received
                          at any time during the transfer process
                        properties: *ref_26
                    required: &ref_87
                      - homeTransactionId
                      - to
                      - amountType
                      - currency
                      - amount
                extensions:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_10
                  required: *ref_11
        required: true
      responses:
        '202':
          description: Bulk transfer accepted successfully
        '400':
          description: Malformed or missing required body, headers or parameters
          content: &ref_41
            application/json:
              schema:
                allOf: &ref_92
                  - type: object
                    properties: *ref_22
                  - type: object
                    required:
                      - bulkTransferState
                    properties:
                      bulkTransferState:
                        type: object
                        required: &ref_39
                          - bulkTransferId
                          - individualTransferResults
                          - currentState
                        properties: &ref_40
                          bulkTransferId:
                            title: CorrelationId
                            type: string
                            pattern: >-
                              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                            description: >-
                              Identifier that correlates all messages of the
                              same sequence. The API data type UUID (Universally
                              Unique Identifier) is a JSON String in canonical
                              format, conforming to [RFC
                              4122](https://tools.ietf.org/html/rfc4122), that
                              is restricted by a regular expression for
                              interoperability reasons. A UUID is always 36
                              characters long, 32 hexadecimal symbols and 4
                              dashes (‘-‘).
                            example: b51ec534-ee48-4575-b6a9-ead2955b8069
                          bulkQuoteId:
                            title: CorrelationId
                            type: string
                            pattern: >-
                              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                            description: >-
                              Identifier that correlates all messages of the
                              same sequence. The API data type UUID (Universally
                              Unique Identifier) is a JSON String in canonical
                              format, conforming to [RFC
                              4122](https://tools.ietf.org/html/rfc4122), that
                              is restricted by a regular expression for
                              interoperability reasons. A UUID is always 36
                              characters long, 32 hexadecimal symbols and 4
                              dashes (‘-‘).
                            example: b51ec534-ee48-4575-b6a9-ead2955b8069
                          homeTransactionId:
                            type: string
                            description: >-
                              Transaction ID from the DFSP backend, used to
                              reconcile transactions between the Switch and DFSP
                              backend systems.
                          bulkTransferState:
                            title: TransferState
                            type: string
                            enum: *ref_27
                            description: >-
                              Below are the allowed values for the enumeration.

                              - RECEIVED - Next ledger has received the
                              transfer.

                              - RESERVED - Next ledger has reserved the
                              transfer.

                              - COMMITTED - Next ledger has successfully
                              performed the transfer.

                              - ABORTED - Next ledger has aborted the transfer
                              due to a rejection or failure to perform the
                              transfer.
                            example: RESERVED
                          completedTimestamp:
                            title: DateTime
                            type: string
                            pattern: >-
                              ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                            description: >-
                              The API data type DateTime is a JSON String in a
                              lexical format that is restricted by a regular
                              expression for interoperability reasons. The
                              format is according to [ISO
                              8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                              expressed in a combined date, time and time zone
                              format. A more readable version of the format is
                              yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                              "2016-05-24T08:38:08.699-04:00",
                              "2016-05-24T08:38:08.699Z" (where Z indicates Zulu
                              time zone, same as UTC).
                            example: '2016-05-24T08:38:08.699-04:00'
                          extensionList:
                            title: ExtensionList
                            type: object
                            description: >-
                              Data model for the complex type ExtensionList. An
                              optional list of extensions, specific to
                              deployment.
                            properties: *ref_10
                            required: *ref_11
                          currentState:
                            type: string
                            enum: &ref_43
                              - ERROR_OCCURRED
                              - COMPLETED
                          individualTransferResults:
                            type: array
                            maxItems: 1000
                            items:
                              type: object
                              required: &ref_90
                                - transferId
                              properties: &ref_91
                                transferId:
                                  title: CorrelationId
                                  type: string
                                  pattern: >-
                                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                                  description: >-
                                    Identifier that correlates all messages of
                                    the same sequence. The API data type UUID
                                    (Universally Unique Identifier) is a JSON
                                    String in canonical format, conforming to
                                    [RFC
                                    4122](https://tools.ietf.org/html/rfc4122),
                                    that is restricted by a regular expression
                                    for interoperability reasons. A UUID is
                                    always 36 characters long, 32 hexadecimal
                                    symbols and 4 dashes (‘-‘).
                                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                                fulfilment:
                                  description: >-
                                    Fulfilment that must be attached to the
                                    transfer by the Payee.
                                  title: IlpFulfilment
                                  type: string
                                  pattern: ^[A-Za-z0-9-_]{43}$
                                  maxLength: 48
                                  example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                                extensionList:
                                  description: >-
                                    Data model for the complex type
                                    ExtensionList. An optional list of
                                    extensions, specific to deployment.
                                  title: ExtensionList
                                  type: object
                                  properties: *ref_10
                                  required: *ref_11
                                lastError:
                                  type: object
                                  description: >-
                                    This object represents a Mojaloop API error
                                    received at any time during the transfer
                                    process
                                  properties: *ref_26
                            description: >-
                              List of individual transfer result in a bulk
                              transfer response.
        '500':
          description: Internal Server Error
          content: &ref_42
            application/json:
              schema:
                type: object
                properties: *ref_22
  /bulkTransactions/{bulkTransactionId}:
    put:
      summary: Amends the bulk transaction request
      description: >-
        The HTTP request `PUT /bulkTransactions/{bulkTransactionId}` is used to
        amend information regarding a bulk transaction, i.e. when
        autoAcceptParty or autoAcceptQuote  is false then the payer need to
        provide confirmation to proceed with further processing of the request.
        The `{bulkTransactionId}` in the URI should contain the
        `bulkTransactionId` that was used for the creation of the bulk transfer.
      tags:
        - BulkTransactions
      parameters:
        - name: bulkTransactionId
          in: path
          required: true
          schema: &ref_159
            title: CorrelationId
            type: string
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            description: >-
              Identifier that correlates all messages of the same sequence. The
              API data type UUID (Universally Unique Identifier) is a JSON
              String in canonical format, conforming to [RFC
              4122](https://tools.ietf.org/html/rfc4122), that is restricted by
              a regular expression for interoperability reasons. A UUID is
              always 36 characters long, 32 hexadecimal symbols and 4 dashes
              (‘-‘).
            example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >-
            Identifier of the bulk transaction to continue as returned in the
            response to a `POST /bulkTransaction` request.
      requestBody:
        description: Bulk transaction request body
        content:
          application/json:
            schema:
              oneOf:
                - description: >-
                    The object sent back as confirmation of payee parties when
                    autoAcceptParty is false.
                  type: object
                  required: &ref_34
                    - bulkHomeTransactionID
                    - individualTransfers
                  properties: &ref_35
                    bulkHomeTransactionID:
                      type: string
                      description: >-
                        Transaction ID from the DFSP backend, used to reconcile
                        transactions between the Switch and DFSP backend
                        systems.
                    individualTransfers:
                      description: >-
                        List of individual transfers in a bulk transfer with
                        accept party information.
                      type: array
                      minItems: 1
                      maxItems: 1000
                      items:
                        allOf:
                          - type: object
                            description: >-
                              Data model for the 'individualTransfer' while
                              accepting party or quote.
                            properties: &ref_30
                              homeTransactionId:
                                type: string
                                description: >-
                                  Transaction ID from the DFSP backend, used to
                                  reconcile transactions between the Switch and
                                  DFSP backend systems.
                              transactionId:
                                title: CorrelationId
                                type: string
                                pattern: >-
                                  ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                                description: >-
                                  Identifier that correlates all messages of the
                                  same sequence. The API data type UUID
                                  (Universally Unique Identifier) is a JSON
                                  String in canonical format, conforming to [RFC
                                  4122](https://tools.ietf.org/html/rfc4122),
                                  that is restricted by a regular expression for
                                  interoperability reasons. A UUID is always 36
                                  characters long, 32 hexadecimal symbols and 4
                                  dashes (‘-‘).
                                example: b51ec534-ee48-4575-b6a9-ead2955b8069
                            required: &ref_31
                              - homeTransactionId
                              - transactionId
                          - type: object
                            required: *ref_28
                            properties: *ref_29
                - description: >-
                    The object sent back as confirmation of quotes when
                    autoAcceptQuotes is false.
                  type: object
                  required: &ref_37
                    - bulkHomeTransactionID
                    - individualTransfers
                  properties: &ref_38
                    bulkHomeTransactionID:
                      type: string
                      description: >-
                        Transaction ID from the DFSP backend, used to reconcile
                        transactions between the Switch and DFSP backend
                        systems.
                    individualTransfers:
                      description: List of individual transfers in a bulk transfer.
                      type: array
                      minItems: 1
                      maxItems: 1000
                      items:
                        allOf:
                          - type: object
                            description: >-
                              Data model for the 'individualTransfer' while
                              accepting party or quote.
                            properties: *ref_30
                            required: *ref_31
                          - type: object
                            required: *ref_32
                            properties: *ref_33
        required: true
      responses:
        '202':
          description: Bulk transaction information successfully amended
        '400':
          description: Malformed or missing required body, headers or parameters
          content: &ref_144
            application/json:
              schema:
                oneOf:
                  - allOf: &ref_94
                      - type: object
                        properties: *ref_22
                      - type: object
                        required:
                          - bulkTransferState
                        properties:
                          bulkTransferState:
                            allOf:
                              - description: >-
                                  The object sent back as confirmation of payee
                                  parties when autoAcceptParty is false.
                                type: object
                                required: *ref_34
                                properties: *ref_35
                              - type: object
                                description: >-
                                  This object represents a Mojaloop API error
                                  received at any time during the party
                                  discovery process
                                properties: &ref_93
                                  httpStatusCode:
                                    type: integer
                                    description: >-
                                      The HTTP status code returned to the
                                      caller. This is the same as the actual
                                      HTTP status code returned with the
                                      response.
                                  mojaloopError:
                                    description: >-
                                      If a transfer process results in an error
                                      callback during the asynchronous Mojaloop
                                      API exchange, this property will contain
                                      the underlying Mojaloop API error object.
                                    type: object
                                    properties: *ref_36
                  - allOf: &ref_95
                      - type: object
                        properties: *ref_22
                      - type: object
                        required:
                          - bulkTansferState
                        properties:
                          bulkTransferState:
                            allOf:
                              - description: >-
                                  The object sent back as confirmation of quotes
                                  when autoAcceptQuotes is false.
                                type: object
                                required: *ref_37
                                properties: *ref_38
                              - type: object
                                description: >-
                                  This object represents a Mojaloop API error
                                  received at any time during the quote process
                                properties: &ref_46
                                  httpStatusCode:
                                    type: integer
                                    description: >-
                                      The HTTP status code returned to the
                                      caller. This is the same as the actual
                                      HTTP status code returned with the
                                      response.
                                  mojaloopError:
                                    description: >-
                                      If a quote process results in an error
                                      callback during the asynchronous Mojaloop
                                      API exchange, this property will contain
                                      the underlying Mojaloop API error object.
                                    type: object
                                    properties: *ref_36
        '500':
          description: An error occurred processing the bulk transaction
          content:
            application/json:
              schema:
                type: object
                properties: *ref_22
  /bulkTransfers:
    post:
      summary: Sends money from one account to multiple accounts
      description: >
        The HTTP request `POST /bulkTransfers` is used to request the movement
        of funds from payer DFSP to payees' DFSP.
      tags:
        - BulkTransfers
      requestBody:
        description: Bulk transfer request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_98
                - bulkTransferId
                - homeTransactionId
                - bulkQuoteId
                - from
                - individualTransfers
              properties: &ref_99
                homeTransactionId:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                bulkTransferId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                bulkQuoteId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                from:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                individualTransfers:
                  description: List of individual transfers in a bulk transfer.
                  type: array
                  minItems: 1
                  maxItems: 1000
                  items:
                    title: IndividualTransfer
                    type: object
                    description: Data model for the complex type 'individualTransfer'.
                    properties: &ref_96
                      transferId:
                        title: CorrelationId
                        type: string
                        pattern: >-
                          ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                        description: >-
                          Identifier that correlates all messages of the same
                          sequence. The API data type UUID (Universally Unique
                          Identifier) is a JSON String in canonical format,
                          conforming to [RFC
                          4122](https://tools.ietf.org/html/rfc4122), that is
                          restricted by a regular expression for
                          interoperability reasons. A UUID is always 36
                          characters long, 32 hexadecimal symbols and 4 dashes
                          (‘-‘).
                        example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      to:
                        type: object
                        required: *ref_0
                        properties: *ref_1
                      amountType:
                        title: AmountType
                        type: string
                        enum: *ref_3
                        description: >-
                          Below are the allowed values for the enumeration
                          AmountType.

                          - SEND - Amount the Payer would like to send, that is,
                          the amount that should be withdrawn from the Payer
                          account including any fees.

                          - RECEIVE - Amount the Payer would like the Payee to
                          receive, that is, the amount that should be sent to
                          the receiver exclusive of any fees.
                        example: RECEIVE
                      currency:
                        title: Currency
                        description: >-
                          The currency codes defined in [ISO
                          4217](https://www.iso.org/iso-4217-currency-codes.html)
                          as three-letter alphabetic codes are used as the
                          standard naming representation for currencies.
                        type: string
                        minLength: 3
                        maxLength: 3
                        enum: *ref_4
                      amount:
                        title: Amount
                        type: string
                        pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                        description: >-
                          The API data type Amount is a JSON String in a
                          canonical format that is restricted by a regular
                          expression for interoperability reasons. This pattern
                          does not allow any trailing zeroes at all, but allows
                          an amount without a minor currency unit. It also only
                          allows four digits in the minor currency unit; a
                          negative value is not allowed. Using more than 18
                          digits in the major currency unit is not allowed.
                        example: '123.45'
                      transactionType:
                        title: transferTransactionType
                        type: string
                        enum: *ref_5
                        description: Type of transaction.
                      ilpPacket:
                        title: IlpPacket
                        type: string
                        pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
                        minLength: 1
                        maxLength: 32768
                        description: >-
                          Information for recipient (transport layer
                          information).
                        example: >-
                          AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                      condition:
                        title: IlpCondition
                        type: string
                        pattern: ^[A-Za-z0-9-_]{43}$
                        maxLength: 48
                        description: >-
                          Condition that must be attached to the transfer by the
                          Payer.
                      note:
                        title: Note
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Memo assigned to transaction.
                        example: Note sent to Payee.
                      extensions:
                        title: ExtensionList
                        type: object
                        description: >-
                          Data model for the complex type ExtensionList. An
                          optional list of extensions, specific to deployment.
                        properties: *ref_10
                        required: *ref_11
                    required: &ref_97
                      - transferId
                      - to
                      - amountType
                      - currency
                      - amount
                      - ilpPacket
                      - condition
                extensions:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_10
                  required: *ref_11
        required: true
      responses:
        '200':
          description: Bulk transfer completed successfully
          content: &ref_145
            application/json:
              schema:
                type: object
                required: *ref_39
                properties: *ref_40
        '400':
          description: Malformed or missing required body, headers or parameters
          content: *ref_41
        '500':
          description: Internal Server Error
          content: *ref_42
  /bulkTransfers/{bulkTransferId}:
    get:
      summary: Retrieves information for a specific bulk transfer
      description: >-
        The HTTP request `GET /bulkTransfers/{bulkTransferId}` is used to get
        information regarding a bulk transfer created or requested earlier. The
        `{bulkTransferId}` in the URI should contain the `bulkTransferId` that
        was used for the creation of the bulk transfer.
      tags:
        - BulkTransfers
      parameters:
        - name: bulkTransferId
          in: path
          required: true
          schema: &ref_160
            title: CorrelationId
            type: string
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            description: >-
              Identifier that correlates all messages of the same sequence. The
              API data type UUID (Universally Unique Identifier) is a JSON
              String in canonical format, conforming to [RFC
              4122](https://tools.ietf.org/html/rfc4122), that is restricted by
              a regular expression for interoperability reasons. A UUID is
              always 36 characters long, 32 hexadecimal symbols and 4 dashes
              (‘-‘).
            example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >-
            Identifier of the bulk transfer to continue as returned in the
            response to a `POST /bulkTransfers` request.
      responses:
        '200':
          description: Bulk transfer information successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required: &ref_101
                  - bulkTransferId
                  - currentState
                  - fulfils
                properties: &ref_102
                  bulkTransferId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  currentState:
                    type: string
                    enum: *ref_43
                  fulfils:
                    type: array
                    minItems: 1
                    maxItems: 1000
                    items:
                      type: object
                      description: >-
                        A Mojaloop API transfer fulfilment for individual
                        transfers in a bulk transfer
                      properties: &ref_100
                        fulfilment:
                          description: >-
                            Fulfilment that must be attached to the transfer by
                            the Payee.
                          title: IlpFulfilment
                          type: string
                          pattern: ^[A-Za-z0-9-_]{43}$
                          maxLength: 48
                          example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                        extensionList:
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          title: ExtensionList
                          type: object
                          properties: *ref_10
                          required: *ref_11
        '500':
          description: An error occurred processing the bulk transfer
          content:
            application/json:
              schema:
                type: object
                properties: *ref_22
  /bulkQuotes:
    post:
      summary: Request bulk quotes for the provided financial transactions
      description: >
        The HTTP request `POST /bulkQuotes` is used to request a bulk quote to
        fascilitate funds transfer from payer DFSP to payees' DFSP.
      tags:
        - BulkQuotes
      requestBody:
        description: Bulk quote request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_103
                - homeTransactionId
                - from
                - individualQuotes
              properties: &ref_104
                homeTransactionId:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                bulkQuoteId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                from:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                individualQuotes:
                  description: List of individual quotes in a bulk quote.
                  type: array
                  minItems: 1
                  maxItems: 1000
                  items:
                    title: IndividualQuote
                    type: object
                    description: Data model for the complex type 'individualQuote'.
                    properties: &ref_50
                      quoteId:
                        title: CorrelationId
                        type: string
                        pattern: >-
                          ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                        description: >-
                          Identifier that correlates all messages of the same
                          sequence. The API data type UUID (Universally Unique
                          Identifier) is a JSON String in canonical format,
                          conforming to [RFC
                          4122](https://tools.ietf.org/html/rfc4122), that is
                          restricted by a regular expression for
                          interoperability reasons. A UUID is always 36
                          characters long, 32 hexadecimal symbols and 4 dashes
                          (‘-‘).
                        example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      to:
                        type: object
                        required: *ref_0
                        properties: *ref_1
                      amountType:
                        title: AmountType
                        type: string
                        enum: *ref_3
                        description: >-
                          Below are the allowed values for the enumeration
                          AmountType.

                          - SEND - Amount the Payer would like to send, that is,
                          the amount that should be withdrawn from the Payer
                          account including any fees.

                          - RECEIVE - Amount the Payer would like the Payee to
                          receive, that is, the amount that should be sent to
                          the receiver exclusive of any fees.
                        example: RECEIVE
                      currency:
                        title: Currency
                        description: >-
                          The currency codes defined in [ISO
                          4217](https://www.iso.org/iso-4217-currency-codes.html)
                          as three-letter alphabetic codes are used as the
                          standard naming representation for currencies.
                        type: string
                        minLength: 3
                        maxLength: 3
                        enum: *ref_4
                      amount:
                        title: Amount
                        type: string
                        pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                        description: >-
                          The API data type Amount is a JSON String in a
                          canonical format that is restricted by a regular
                          expression for interoperability reasons. This pattern
                          does not allow any trailing zeroes at all, but allows
                          an amount without a minor currency unit. It also only
                          allows four digits in the minor currency unit; a
                          negative value is not allowed. Using more than 18
                          digits in the major currency unit is not allowed.
                        example: '123.45'
                      transactionType:
                        title: transferTransactionType
                        type: string
                        enum: *ref_5
                        description: Type of transaction.
                      note:
                        title: Note
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Memo assigned to transaction.
                        example: Note sent to Payee.
                      extensions:
                        title: ExtensionList
                        type: object
                        description: >-
                          Data model for the complex type ExtensionList. An
                          optional list of extensions, specific to deployment.
                        properties: *ref_10
                        required: *ref_11
                    required: &ref_51
                      - quoteId
                      - to
                      - amountType
                      - currency
                      - transactionType
                      - amount
                extensions:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_10
                  required: *ref_11
        required: true
      responses:
        '200':
          description: Bulk quote completed successfully
          content: &ref_146
            application/json:
              schema:
                type: object
                required: &ref_47
                  - bulkQuoteId
                  - individualQuoteResults
                  - currentState
                  - expiration
                properties: &ref_48
                  bulkQuoteId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  homeTransactionId:
                    type: string
                    description: >-
                      Transaction ID from the DFSP backend, used to reconcile
                      transactions between the Switch and DFSP backend systems.
                  expiration:
                    title: DateTime
                    type: string
                    pattern: >-
                      ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                    description: >-
                      The API data type DateTime is a JSON String in a lexical
                      format that is restricted by a regular expression for
                      interoperability reasons. The format is according to [ISO
                      8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                      expressed in a combined date, time and time zone format. A
                      more readable version of the format is
                      yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                      "2016-05-24T08:38:08.699-04:00",
                      "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                      zone, same as UTC).
                    example: '2016-05-24T08:38:08.699-04:00'
                  extensionList:
                    title: ExtensionList
                    type: object
                    description: >-
                      Data model for the complex type ExtensionList. An optional
                      list of extensions, specific to deployment.
                    properties: *ref_10
                    required: *ref_11
                  currentState:
                    type: string
                    enum: *ref_43
                  individualQuoteResults:
                    type: array
                    maxItems: 1000
                    items:
                      type: object
                      properties: &ref_105
                        quoteId:
                          title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                        transferAmount:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_6
                          required: *ref_7
                        payeeReceiveAmount:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_6
                          required: *ref_7
                        payeeFspFee:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_6
                          required: *ref_7
                        payeeFspCommission:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_6
                          required: *ref_7
                        geoCode:
                          title: GeoCode
                          type: object
                          description: >-
                            Data model for the complex type GeoCode. Indicates
                            the geographic location from where the transaction
                            was initiated.
                          properties: *ref_44
                          required: *ref_45
                        ilpPacket:
                          title: IlpPacket
                          type: string
                          pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
                          minLength: 1
                          maxLength: 32768
                          description: >-
                            Information for recipient (transport layer
                            information).
                          example: >-
                            AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                        condition:
                          title: IlpCondition
                          type: string
                          pattern: ^[A-Za-z0-9-_]{43}$
                          maxLength: 48
                          description: >-
                            Condition that must be attached to the transfer by
                            the Payer.
                        extensionList:
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          title: ExtensionList
                          type: object
                          properties: *ref_10
                          required: *ref_11
                        lastError:
                          description: >-
                            This object represents a Mojaloop API error received
                            at any time during the quote process
                          type: object
                          properties: *ref_46
                      required: &ref_106
                        - quoteId
                        - transferAmount
                        - ilpPacket
                        - condition
                    description: >-
                      List of individualQuoteResults in a bulk transfer
                      response.
        '400':
          description: Malformed or missing required body, headers or parameters
          content: &ref_147
            application/json:
              schema:
                allOf: &ref_49
                  - type: object
                    properties: *ref_22
                  - type: object
                    required:
                      - bulkQuoteState
                    properties:
                      bulkQuoteState:
                        type: object
                        required: *ref_47
                        properties: *ref_48
        '500':
          description: An error occurred processing the bulk quote
          content: &ref_148
            application/json:
              schema:
                allOf: *ref_49
        '504':
          description: Timeout occurred processing the bulk quote
          content: &ref_149
            application/json:
              schema:
                allOf: *ref_49
  /bulkQuotes/{bulkQuoteId}:
    get:
      summary: Retrieves information for a specific bulk quote
      description: >-
        The HTTP request `GET /bulkQuotes/{bulktQuoteId}` is used to get
        information regarding a bulk quote created or requested earlier. The
        `{bulkQuoteId}` in the URI should contain the `bulkQuoteId` that was
        used for the creation of the bulk quote.
      tags:
        - BulkQuotes
      parameters:
        - name: bulkQuoteId
          in: path
          required: true
          schema: &ref_161
            title: CorrelationId
            type: string
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            description: >-
              Identifier that correlates all messages of the same sequence. The
              API data type UUID (Universally Unique Identifier) is a JSON
              String in canonical format, conforming to [RFC
              4122](https://tools.ietf.org/html/rfc4122), that is restricted by
              a regular expression for interoperability reasons. A UUID is
              always 36 characters long, 32 hexadecimal symbols and 4 dashes
              (‘-‘).
            example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >-
            Identifier of the bulk transfer to continue as returned in the
            response to a `POST /bulkTransfers` request.
      responses:
        '200':
          description: Bulk quote information successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required: &ref_108
                  - bulkQuoteId
                  - currentState
                  - individualQuotes
                properties: &ref_109
                  bulkQuoteId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  currentState:
                    type: string
                    enum: &ref_107
                      - ERROR_OCCURRED
                      - COMPLETED
                  individualQuotes:
                    type: array
                    minItems: 1
                    maxItems: 1000
                    items:
                      title: IndividualQuote
                      type: object
                      description: Data model for the complex type 'individualQuote'.
                      properties: *ref_50
                      required: *ref_51
        '500':
          description: An error occurred processing the bulk quote
          content:
            application/json:
              schema:
                type: object
                properties: *ref_22
  /requestToPay:
    post:
      summary: Receiver requesting funds from Sender
      description: >
        The HTTP request `POST /requestToPay` is used to support Pull Funds
        pattern where in a receiver can request for funds from the Sender.

        The underlying API has two stages:

          1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
          2. Transaction Request. This request enables a Payee to request Payer to send electronic funds to the Payee.
      tags:
        - RequestToPay
      requestBody:
        description: RequestToPay request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_113
                - homeTransactionId
                - from
                - to
                - amountType
                - currency
                - amount
                - scenario
                - initiator
                - initiatorType
              properties: &ref_114
                homeTransactionId:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                from:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                to:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                amountType:
                  title: AmountType
                  type: string
                  enum: *ref_3
                  description: >-
                    Below are the allowed values for the enumeration AmountType.

                    - SEND - Amount the Payer would like to send, that is, the
                    amount that should be withdrawn from the Payer account
                    including any fees.

                    - RECEIVE - Amount the Payer would like the Payee to
                    receive, that is, the amount that should be sent to the
                    receiver exclusive of any fees.
                  example: RECEIVE
                currency:
                  title: Currency
                  description: >-
                    The currency codes defined in [ISO
                    4217](https://www.iso.org/iso-4217-currency-codes.html) as
                    three-letter alphabetic codes are used as the standard
                    naming representation for currencies.
                  type: string
                  minLength: 3
                  maxLength: 3
                  enum: *ref_4
                amount:
                  title: Amount
                  type: string
                  pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                  description: >-
                    The API data type Amount is a JSON String in a canonical
                    format that is restricted by a regular expression for
                    interoperability reasons. This pattern does not allow any
                    trailing zeroes at all, but allows an amount without a minor
                    currency unit. It also only allows four digits in the minor
                    currency unit; a negative value is not allowed. Using more
                    than 18 digits in the major currency unit is not allowed.
                  example: '123.45'
                scenario:
                  title: TransactionType
                  type: object
                  description: Data model for the complex type TransactionType.
                  properties: &ref_54
                    scenario:
                      title: TransactionScenario
                      type: string
                      enum: &ref_110
                        - DEPOSIT
                        - WITHDRAWAL
                        - TRANSFER
                        - PAYMENT
                        - REFUND
                      description: >-
                        Below are the allowed values for the enumeration.

                        - DEPOSIT - Used for performing a Cash-In (deposit)
                        transaction. In a normal scenario, electronic funds are
                        transferred from a Business account to a Consumer
                        account, and physical cash is given from the Consumer to
                        the Business User.

                        - WITHDRAWAL - Used for performing a Cash-Out
                        (withdrawal) transaction. In a normal scenario,
                        electronic funds are transferred from a Consumer’s
                        account to a Business account, and physical cash is
                        given from the Business User to the Consumer.

                        - TRANSFER - Used for performing a P2P (Peer to Peer, or
                        Consumer to Consumer) transaction.

                        - PAYMENT - Usually used for performing a transaction
                        from a Consumer to a Merchant or Organization, but could
                        also be for a B2B (Business to Business) payment. The
                        transaction could be online for a purchase in an
                        Internet store, in a physical store where both the
                        Consumer and Business User are present, a bill payment,
                        a donation, and so on.

                        - REFUND - Used for performing a refund of transaction.
                      example: DEPOSIT
                    subScenario:
                      title: TransactionSubScenario
                      type: string
                      pattern: ^[A-Z_]{1,32}$
                      description: >-
                        Possible sub-scenario, defined locally within the scheme
                        (UndefinedEnum Type).
                      example: LOCALLY_DEFINED_SUBSCENARIO
                    initiator:
                      title: TransactionInitiator
                      type: string
                      enum: &ref_53
                        - PAYER
                        - PAYEE
                      description: >-
                        Below are the allowed values for the enumeration.

                        - PAYER - Sender of funds is initiating the transaction.
                        The account to send from is either owned by the Payer or
                        is connected to the Payer in some way.

                        - PAYEE - Recipient of the funds is initiating the
                        transaction by sending a transaction request. The Payer
                        must approve the transaction, either automatically by a
                        pre-generated OTP or by pre-approval of the Payee, or by
                        manually approving in his or her own Device.
                      example: PAYEE
                    initiatorType:
                      title: TransactionInitiatorType
                      type: string
                      enum: *ref_52
                      description: >-
                        Below are the allowed values for the enumeration.

                        - CONSUMER - Consumer is the initiator of the
                        transaction.

                        - AGENT - Agent is the initiator of the transaction.

                        - BUSINESS - Business is the initiator of the
                        transaction.

                        - DEVICE - Device is the initiator of the transaction.
                      example: CONSUMER
                    refundInfo:
                      title: Refund
                      type: object
                      description: Data model for the complex type Refund.
                      properties: &ref_111
                        originalTransactionId:
                          title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                        refundReason:
                          title: RefundReason
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Reason for the refund.
                          example: Free text indicating reason for the refund.
                      required: &ref_112
                        - originalTransactionId
                    balanceOfPayments:
                      title: BalanceOfPayments
                      type: string
                      pattern: ^[1-9]\d{2}$
                      description: >-
                        (BopCode) The API data type
                        [BopCode](https://www.imf.org/external/np/sta/bopcode/)
                        is a JSON String of 3 characters, consisting of digits
                        only. Negative numbers are not allowed. A leading zero
                        is not allowed.
                      example: '123'
                  required: &ref_55
                    - scenario
                    - initiator
                    - initiatorType
                initiator:
                  title: TransactionInitiator
                  type: string
                  enum: *ref_53
                  description: >-
                    Below are the allowed values for the enumeration.

                    - PAYER - Sender of funds is initiating the transaction. The
                    account to send from is either owned by the Payer or is
                    connected to the Payer in some way.

                    - PAYEE - Recipient of the funds is initiating the
                    transaction by sending a transaction request. The Payer must
                    approve the transaction, either automatically by a
                    pre-generated OTP or by pre-approval of the Payee, or by
                    manually approving in his or her own Device.
                  example: PAYEE
                initiatorType:
                  title: TransactionInitiatorType
                  type: string
                  enum: *ref_52
                  description: |-
                    Below are the allowed values for the enumeration.
                    - CONSUMER - Consumer is the initiator of the transaction.
                    - AGENT - Agent is the initiator of the transaction.
                    - BUSINESS - Business is the initiator of the transaction.
                    - DEVICE - Device is the initiator of the transaction.
                  example: CONSUMER
        required: true
      responses:
        '200':
          description: Request to Pay completed successfully
          content: &ref_150
            application/json:
              schema:
                type: object
                required: &ref_117
                  - transactionRequestId
                  - from
                  - to
                  - amountType
                  - currency
                  - amount
                  - transactionType
                  - requestToPayState
                properties: &ref_118
                  transactionRequestId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  from:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  to:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  amountType:
                    title: AmountType
                    type: string
                    enum: *ref_3
                    description: >-
                      Below are the allowed values for the enumeration
                      AmountType.

                      - SEND - Amount the Payer would like to send, that is, the
                      amount that should be withdrawn from the Payer account
                      including any fees.

                      - RECEIVE - Amount the Payer would like the Payee to
                      receive, that is, the amount that should be sent to the
                      receiver exclusive of any fees.
                    example: RECEIVE
                  currency:
                    title: Currency
                    description: >-
                      The currency codes defined in [ISO
                      4217](https://www.iso.org/iso-4217-currency-codes.html) as
                      three-letter alphabetic codes are used as the standard
                      naming representation for currencies.
                    type: string
                    minLength: 3
                    maxLength: 3
                    enum: *ref_4
                  amount:
                    title: Amount
                    type: string
                    pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                    description: >-
                      The API data type Amount is a JSON String in a canonical
                      format that is restricted by a regular expression for
                      interoperability reasons. This pattern does not allow any
                      trailing zeroes at all, but allows an amount without a
                      minor currency unit. It also only allows four digits in
                      the minor currency unit; a negative value is not allowed.
                      Using more than 18 digits in the major currency unit is
                      not allowed.
                    example: '123.45'
                  scenario:
                    title: TransactionType
                    type: object
                    description: Data model for the complex type TransactionType.
                    properties: *ref_54
                    required: *ref_55
                  initiator:
                    title: TransactionInitiator
                    type: string
                    enum: *ref_53
                    description: >-
                      Below are the allowed values for the enumeration.

                      - PAYER - Sender of funds is initiating the transaction.
                      The account to send from is either owned by the Payer or
                      is connected to the Payer in some way.

                      - PAYEE - Recipient of the funds is initiating the
                      transaction by sending a transaction request. The Payer
                      must approve the transaction, either automatically by a
                      pre-generated OTP or by pre-approval of the Payee, or by
                      manually approving in his or her own Device.
                    example: PAYEE
                  initiatorType:
                    title: TransactionInitiatorType
                    type: string
                    enum: *ref_52
                    description: |-
                      Below are the allowed values for the enumeration.
                      - CONSUMER - Consumer is the initiator of the transaction.
                      - AGENT - Agent is the initiator of the transaction.
                      - BUSINESS - Business is the initiator of the transaction.
                      - DEVICE - Device is the initiator of the transaction.
                    example: CONSUMER
                  authenticationType:
                    title: AuthenticationType
                    type: string
                    enum: &ref_115
                      - OTP
                      - QRCODE
                      - U2F
                    description: >-
                      Below are the allowed values for the enumeration
                      AuthenticationType.

                      - OTP - One-time password generated by the Payer FSP.

                      - QRCODE - QR code used as One Time Password.

                      - U2F - U2F is a new addition isolated to Thirdparty
                      stream.
                    example: OTP
                  requestToPayState:
                    title: TransactionRequestState
                    type: string
                    enum: &ref_116
                      - RECEIVED
                      - PENDING
                      - ACCEPTED
                      - REJECTED
                    description: >-
                      Below are the allowed values for the enumeration.

                      - RECEIVED - Payer FSP has received the transaction from
                      the Payee FSP.

                      - PENDING - Payer FSP has sent the transaction request to
                      the Payer.

                      - ACCEPTED - Payer has approved the transaction.

                      - REJECTED - Payer has rejected the transaction.
                    example: RECEIVED
  /requestToPayTransfer:
    post:
      summary: >-
        Used to trigger funds from customer fsp account to merchant fsp account.
        This is a follow-up request to requestToPay.
      description: >
        The HTTP request `POST /requestToPayTransfer` is used to request the
        movement of funds from payer DFSP to payee DFSP.

        The underlying Mojaloop API has three stages for money transfer:

          1. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
          2. Authorization. This facilitates getting OTP from payee DFSP.
          3. Transfer. The enactment of the previously agreed "contract"

        This method has several modes of operation.

        - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"`
        this method will terminate and return the quotation when it has been
        received from the payee DFSP.
          If the payee wished to proceed with the otp, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        - If the configuration variable `AUTO_ACCEPT_OTP` is set to `"false"`
        this method will terminate and return the otp when it has been received
        from the payee DFSP.
          If the payer wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        If the configuration variables `AUTO_ACCEPT_PARTIES` and
        `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block
        until all three transfer stages are complete. Upon completion it will
        return the entire set of transfer details received during the operation.


        Combinations of settings for `AUTO_ACCEPT...` configuration variables
        allow the scheme adapter user to decide which mode of operation best
        suits their use cases. i.e. the scheme adapter can be configured to
        "break" the three stage transfer at these points in order to execute
        backend logic such as party verification, quoted fees assessments etc...
      tags:
        - RequestToPayTransfer
      requestBody:
        description: Request To Pay Transfer request body
        content:
          application/json:
            schema:
              type: object
              required: &ref_119
                - requestToPayTransactionId
                - from
                - to
                - amountType
                - currency
                - amount
                - scenario
                - initiator
                - initiatorType
              properties: &ref_120
                requestToPayTransactionId:
                  type: string
                  description: >-
                    Transaction ID from the DFSP backend, used to reconcile
                    transactions between the Switch and DFSP backend systems.
                from:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                to:
                  type: object
                  required: *ref_0
                  properties: *ref_1
                amountType:
                  title: AmountType
                  type: string
                  enum: *ref_3
                  description: >-
                    Below are the allowed values for the enumeration AmountType.

                    - SEND - Amount the Payer would like to send, that is, the
                    amount that should be withdrawn from the Payer account
                    including any fees.

                    - RECEIVE - Amount the Payer would like the Payee to
                    receive, that is, the amount that should be sent to the
                    receiver exclusive of any fees.
                  example: RECEIVE
                currency:
                  title: Currency
                  description: >-
                    The currency codes defined in [ISO
                    4217](https://www.iso.org/iso-4217-currency-codes.html) as
                    three-letter alphabetic codes are used as the standard
                    naming representation for currencies.
                  type: string
                  minLength: 3
                  maxLength: 3
                  enum: *ref_4
                amount:
                  title: Amount
                  type: string
                  pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                  description: >-
                    The API data type Amount is a JSON String in a canonical
                    format that is restricted by a regular expression for
                    interoperability reasons. This pattern does not allow any
                    trailing zeroes at all, but allows an amount without a minor
                    currency unit. It also only allows four digits in the minor
                    currency unit; a negative value is not allowed. Using more
                    than 18 digits in the major currency unit is not allowed.
                  example: '123.45'
                scenario:
                  title: TransactionType
                  type: object
                  description: Data model for the complex type TransactionType.
                  properties: *ref_54
                  required: *ref_55
                initiator:
                  title: TransactionInitiator
                  type: string
                  enum: *ref_53
                  description: >-
                    Below are the allowed values for the enumeration.

                    - PAYER - Sender of funds is initiating the transaction. The
                    account to send from is either owned by the Payer or is
                    connected to the Payer in some way.

                    - PAYEE - Recipient of the funds is initiating the
                    transaction by sending a transaction request. The Payer must
                    approve the transaction, either automatically by a
                    pre-generated OTP or by pre-approval of the Payee, or by
                    manually approving in his or her own Device.
                  example: PAYEE
                initiatorType:
                  title: TransactionInitiatorType
                  type: string
                  enum: *ref_52
                  description: |-
                    Below are the allowed values for the enumeration.
                    - CONSUMER - Consumer is the initiator of the transaction.
                    - AGENT - Agent is the initiator of the transaction.
                    - BUSINESS - Business is the initiator of the transaction.
                    - DEVICE - Device is the initiator of the transaction.
                  example: CONSUMER
                note:
                  title: Note
                  type: string
                  minLength: 1
                  maxLength: 128
                  description: Memo assigned to transaction.
                  example: Note sent to Payee.
        required: true
      responses:
        '200':
          description: Transfer completed successfully
          content: &ref_151
            application/json:
              schema:
                type: object
                required: &ref_121
                  - requestToPayTransactionId
                  - from
                  - to
                  - amountType
                  - currency
                  - amount
                  - transactionType
                properties: &ref_122
                  transferId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  requestToPayTransactionId:
                    type: string
                    description: >-
                      Transaction ID from the DFSP backend, used to reconcile
                      transactions between the Switch and DFSP backend systems.
                  from:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  to:
                    type: object
                    required: *ref_0
                    properties: *ref_1
                  amountType:
                    title: AmountType
                    type: string
                    enum: *ref_3
                    description: >-
                      Below are the allowed values for the enumeration
                      AmountType.

                      - SEND - Amount the Payer would like to send, that is, the
                      amount that should be withdrawn from the Payer account
                      including any fees.

                      - RECEIVE - Amount the Payer would like the Payee to
                      receive, that is, the amount that should be sent to the
                      receiver exclusive of any fees.
                    example: RECEIVE
                  currency:
                    title: Currency
                    description: >-
                      The currency codes defined in [ISO
                      4217](https://www.iso.org/iso-4217-currency-codes.html) as
                      three-letter alphabetic codes are used as the standard
                      naming representation for currencies.
                    type: string
                    minLength: 3
                    maxLength: 3
                    enum: *ref_4
                  amount:
                    title: Amount
                    type: string
                    pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
                    description: >-
                      The API data type Amount is a JSON String in a canonical
                      format that is restricted by a regular expression for
                      interoperability reasons. This pattern does not allow any
                      trailing zeroes at all, but allows an amount without a
                      minor currency unit. It also only allows four digits in
                      the minor currency unit; a negative value is not allowed.
                      Using more than 18 digits in the major currency unit is
                      not allowed.
                    example: '123.45'
                  transactionType:
                    title: transferTransactionType
                    type: string
                    enum: *ref_5
                    description: Type of transaction.
                  note:
                    title: Note
                    type: string
                    minLength: 1
                    maxLength: 128
                    description: Memo assigned to transaction.
                    example: Note sent to Payee.
                  currentState:
                    type: string
                    enum: *ref_19
                  quoteId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  quoteResponse:
                    title: QuotesIDPutResponse
                    type: object
                    description: The object sent in the PUT /quotes/{ID} callback.
                    properties: *ref_56
                    required: *ref_57
                  quoteResponseSource:
                    type: string
                    description: >
                      FSPID of the entity that supplied the quote response. This
                      may not be the same as the FSPID of the entity which owns
                      the end user account in the case of a FOREX transfer. i.e.
                      it may be a FOREX gateway.
                  fulfil:
                    title: TransfersIDPutResponse
                    type: object
                    description: The object sent in the PUT /transfers/{ID} callback.
                    properties: *ref_20
                    required: *ref_21
                  lastError:
                    description: >-
                      This object represents a Mojaloop API error received at
                      any time during the transfer process
                    type: object
                    properties: *ref_26
        '400':
          description: Malformed or missing required body, headers or parameters
          content: &ref_152
            application/json:
              schema:
                allOf: *ref_14
        '500':
          description: An error occurred processing the transfer
          content: *ref_16
        '504':
          description: Timeout occurred processing the transfer
          content: *ref_17
  /requestToPayTransfer/{requestToPayTransactionId}:
    put:
      summary: >-
        Continues a transfer that has paused at the otp stage in order to accept
        or reject quote
      description: >
        The HTTP request `PUT /transfers/{transferId}` is used to continue a
        transfer initiated via the `POST /transfers` method that has halted
        after party lookup and/or quotation stage.


        The request body should contain either the "acceptOTP" or "acceptQuote"
        property set to `true` as required to continue the transfer.


        See the description of the `POST /requestToPayTransfer` HTTP method for
        more information on modes of transfer.
      tags:
        - RequestToPayTransferID
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: *ref_32
                  properties: *ref_33
                - type: object
                  required: &ref_123
                    - acceptOTP
                  properties: &ref_124
                    acceptOTP:
                      type: boolean
                      enum:
                        - true
                        - false
      parameters:
        - name: requestToPayTransactionId
          in: path
          required: true
          schema: &ref_162
            title: CorrelationId
            type: string
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            description: >-
              Identifier that correlates all messages of the same sequence. The
              API data type UUID (Universally Unique Identifier) is a JSON
              String in canonical format, conforming to [RFC
              4122](https://tools.ietf.org/html/rfc4122), that is restricted by
              a regular expression for interoperability reasons. A UUID is
              always 36 characters long, 32 hexadecimal symbols and 4 dashes
              (‘-‘).
            example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >-
            Identifier of the merchant request to pay transfer to continue as
            returned in the response to a `POST /requestToPayTransfer` request.
      responses:
        '200':
          description: Transfer completed successfully
          content: *ref_15
        '500':
          description: An error occurred processing the transfer
          content: *ref_16
        '504':
          description: Timeout occurred processing the transfer
          content: *ref_17
  /accounts:
    post:
      summary: Create accounts on the Account Lookup Service
      description: >-
        The HTTP request `POST /accounts` is used to create account information
        on the Account Lookup Service (ALS) regarding the provided list of
        identities.


        Caller DFSP is used as the account source FSP information
      tags:
        - Accounts
      requestBody:
        description: Identities list request body
        content:
          application/json:
            schema:
              type: array
              items: &ref_58
                type: object
                required:
                  - idType
                  - idValue
                  - currency
                properties:
                  idType:
                    title: PartyIdType
                    type: string
                    enum: *ref_23
                    description: >-
                      Below are the allowed values for the enumeration.

                      - MSISDN - An MSISDN (Mobile Station International
                      Subscriber Directory Number, that is, the phone number) is
                      used as reference to a participant. The MSISDN identifier
                      should be in international format according to the [ITU-T
                      E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
                      Optionally, the MSISDN may be prefixed by a single plus
                      sign, indicating the international prefix.

                      - EMAIL - An email is used as reference to a participant.
                      The format of the email should be according to the
                      informational [RFC
                      3696](https://tools.ietf.org/html/rfc3696).

                      - PERSONAL_ID - A personal identifier is used as reference
                      to a participant. Examples of personal identification are
                      passport number, birth certificate number, and national
                      registration number. The identifier number is added in the
                      PartyIdentifier element. The personal identifier type is
                      added in the PartySubIdOrType element.

                      - BUSINESS - A specific Business (for example, an
                      organization or a company) is used as reference to a
                      participant. The BUSINESS identifier can be in any format.
                      To make a transaction connected to a specific username or
                      bill number in a Business, the PartySubIdOrType element
                      should be used.

                      - DEVICE - A specific device (for example, a POS or ATM)
                      ID connected to a specific business or organization is
                      used as reference to a Party. For referencing a specific
                      device under a specific business or organization, use the
                      PartySubIdOrType element.

                      - ACCOUNT_ID - A bank account number or FSP account ID
                      should be used as reference to a participant. The
                      ACCOUNT_ID identifier can be in any format, as formats can
                      greatly differ depending on country and FSP.

                      - IBAN - A bank account number or FSP account ID is used
                      as reference to a participant. The IBAN identifier can
                      consist of up to 34 alphanumeric characters and should be
                      entered without whitespace.

                      - ALIAS An alias is used as reference to a participant.
                      The alias should be created in the FSP as an alternative
                      reference to an account owner. Another example of an alias
                      is a username in the FSP system. The ALIAS identifier can
                      be in any format. It is also possible to use the
                      PartySubIdOrType element for identifying an account under
                      an Alias defined by the PartyIdentifier.
                  idValue:
                    title: PartyIdentifier
                    type: string
                    minLength: 1
                    maxLength: 128
                    description: Identifier of the Party.
                    example: '16135551212'
                  idSubValue:
                    title: PartySubIdOrType
                    type: string
                    minLength: 1
                    maxLength: 128
                    description: >-
                      Either a sub-identifier of a PartyIdentifier, or a
                      sub-type of the PartyIdType, normally a
                      PersonalIdentifierType.
                  currency:
                    title: Currency
                    description: >-
                      The currency codes defined in [ISO
                      4217](https://www.iso.org/iso-4217-currency-codes.html) as
                      three-letter alphabetic codes are used as the standard
                      naming representation for currencies.
                    type: string
                    minLength: 3
                    maxLength: 3
                    enum: *ref_4
        required: true
      responses:
        '200':
          description: Accounts creation completed
          content: &ref_153
            application/json:
              schema:
                type: object
                required: &ref_59
                  - accounts
                properties: &ref_60
                  modelId:
                    title: CorrelationId
                    type: string
                    pattern: >-
                      ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    description: >-
                      Identifier that correlates all messages of the same
                      sequence. The API data type UUID (Universally Unique
                      Identifier) is a JSON String in canonical format,
                      conforming to [RFC
                      4122](https://tools.ietf.org/html/rfc4122), that is
                      restricted by a regular expression for interoperability
                      reasons. A UUID is always 36 characters long, 32
                      hexadecimal symbols and 4 dashes (‘-‘).
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  accounts:
                    type: array
                    items: *ref_58
                  response:
                    type: array
                    items: &ref_125
                      type: object
                      required:
                        - idType
                        - idValue
                      properties:
                        idType:
                          title: PartyIdType
                          type: string
                          enum: *ref_23
                          description: >-
                            Below are the allowed values for the enumeration.

                            - MSISDN - An MSISDN (Mobile Station International
                            Subscriber Directory Number, that is, the phone
                            number) is used as reference to a participant. The
                            MSISDN identifier should be in international format
                            according to the [ITU-T E.164
                            standard](https://www.itu.int/rec/T-REC-E.164/en).
                            Optionally, the MSISDN may be prefixed by a single
                            plus sign, indicating the international prefix.

                            - EMAIL - An email is used as reference to a
                            participant. The format of the email should be
                            according to the informational [RFC
                            3696](https://tools.ietf.org/html/rfc3696).

                            - PERSONAL_ID - A personal identifier is used as
                            reference to a participant. Examples of personal
                            identification are passport number, birth
                            certificate number, and national registration
                            number. The identifier number is added in the
                            PartyIdentifier element. The personal identifier
                            type is added in the PartySubIdOrType element.

                            - BUSINESS - A specific Business (for example, an
                            organization or a company) is used as reference to a
                            participant. The BUSINESS identifier can be in any
                            format. To make a transaction connected to a
                            specific username or bill number in a Business, the
                            PartySubIdOrType element should be used.

                            - DEVICE - A specific device (for example, a POS or
                            ATM) ID connected to a specific business or
                            organization is used as reference to a Party. For
                            referencing a specific device under a specific
                            business or organization, use the PartySubIdOrType
                            element.

                            - ACCOUNT_ID - A bank account number or FSP account
                            ID should be used as reference to a participant. The
                            ACCOUNT_ID identifier can be in any format, as
                            formats can greatly differ depending on country and
                            FSP.

                            - IBAN - A bank account number or FSP account ID is
                            used as reference to a participant. The IBAN
                            identifier can consist of up to 34 alphanumeric
                            characters and should be entered without whitespace.

                            - ALIAS An alias is used as reference to a
                            participant. The alias should be created in the FSP
                            as an alternative reference to an account owner.
                            Another example of an alias is a username in the FSP
                            system. The ALIAS identifier can be in any format.
                            It is also possible to use the PartySubIdOrType
                            element for identifying an account under an Alias
                            defined by the PartyIdentifier.
                        idValue:
                          title: PartyIdentifier
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Identifier of the Party.
                          example: '16135551212'
                        idSubValue:
                          title: PartySubIdOrType
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Either a sub-identifier of a PartyIdentifier, or a
                            sub-type of the PartyIdType, normally a
                            PersonalIdentifierType.
                        error:
                          type: object
                          properties: *ref_22
                  currentState:
                    type: string
                    enum: &ref_126
                      - ERROR_OCCURRED
                      - COMPLETED
                  lastError:
                    type: object
                    description: >-
                      This object represents a Mojaloop API error received at
                      any time during the transfer process
                    properties: *ref_26
                  postAccountsResponse:
                    type: object
                    required:
                      - body
                    properties:
                      body:
                        type: object
                      headers:
                        type: object
        '400':
          description: An error occurred creating accounts
          content: &ref_61
            application/json:
              schema:
                allOf: &ref_62
                  - type: object
                    properties: *ref_22
                  - type: object
                    required:
                      - executionState
                    properties:
                      executionState:
                        type: object
                        required: *ref_59
                        properties: *ref_60
        '500':
          description: An error occurred creating accounts
          content: *ref_61
        '504':
          description: Timeout occurred creating accounts
          content: &ref_154
            application/json:
              schema:
                allOf: *ref_62
  /parties/{Type}/{ID}:
    parameters:
      - name: Type
        in: path
        required: true
        schema: &ref_65
          type: string
        description: >-
          The type of the party identifier. For example, `MSISDN`,
          `PERSONAL_ID`.
      - name: ID
        in: path
        required: true
        schema: &ref_66
          type: string
        description: The identifier value.
    get:
      description: >-
        The HTTP request GET /parties// (or GET /parties///) is used to lookup
        information regarding the requested Party, defined by ,  and optionally
        (for example, GET /parties/MSISDN/123456789, or GET
        /parties/BUSINESS/shoecompany/employee1).
      summary: PartiesByTypeAndID
      tags:
        - parties
      operationId: PartiesByTypeAndID
      responses:
        '200':
          description: PartiesByIdSuccess
          content: &ref_67
            application/json:
              schema:
                title: partiesByIdResponse
                type: object
                description: GET /parties/{Type}/{ID} response object
                properties: &ref_127
                  party:
                    properties:
                      body:
                        description: Data model for the complex type Party.
                        title: Party
                        type: object
                        properties: *ref_24
                        required: *ref_25
                      headers:
                        type: object
                    required:
                      - body
                      - headers
                  currentState:
                    type: string
                    enum: &ref_69
                      - WAITING_FOR_ACTION
                      - COMPLETED
                      - ERROR_OCCURRED
                required: &ref_128
                  - party
                  - currentState
        '404':
          description: PartiesByIdError404
          content: &ref_68
            application/json:
              schema:
                type: object
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties: *ref_63
                    required: *ref_64
  /parties/{Type}/{ID}/{SubId}:
    parameters:
      - name: Type
        in: path
        required: true
        schema: *ref_65
        description: >-
          The type of the party identifier. For example, `MSISDN`,
          `PERSONAL_ID`.
      - name: ID
        in: path
        required: true
        schema: *ref_66
        description: The identifier value.
      - name: SubId
        in: path
        required: true
        schema: &ref_163
          type: string
        description: >-
          A sub-identifier of the party identifier, or a sub-type of the party
          identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`.
    get:
      description: >-
        The HTTP request GET /parties// (or GET /parties///) is used to lookup
        information regarding the requested Party, defined by ,  and optionally
        (for example, GET /parties/MSISDN/123456789, or GET
        /parties/BUSINESS/shoecompany/employee1).
      summary: PartiesSubIdByTypeAndID
      tags:
        - parties
      operationId: PartiesSubIdByTypeAndID
      responses:
        '200':
          description: PartiesByIdSuccess
          content: *ref_67
        '404':
          description: PartiesByIdError404
          content: *ref_68
  /quotes:
    post:
      summary: Quotes endpoint
      description: is used to request quotes from other DFSP
      tags:
        - quotes
      operationId: QuotesPost
      requestBody:
        description: Quotes request payload
        content:
          application/json:
            schema:
              title: simpleQuotesPostRequest
              type: object
              properties: &ref_131
                fspId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
                quotesPostRequest:
                  title: QuotesPostRequest
                  type: object
                  description: The object sent in the POST /quotes request.
                  properties: &ref_129
                    quoteId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    transactionId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    transactionRequestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    payee:
                      title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_24
                      required: *ref_25
                    payer:
                      title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_24
                      required: *ref_25
                    amountType:
                      title: AmountType
                      type: string
                      enum: *ref_3
                      description: >-
                        Below are the allowed values for the enumeration
                        AmountType.

                        - SEND - Amount the Payer would like to send, that is,
                        the amount that should be withdrawn from the Payer
                        account including any fees.

                        - RECEIVE - Amount the Payer would like the Payee to
                        receive, that is, the amount that should be sent to the
                        receiver exclusive of any fees.
                      example: RECEIVE
                    amount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_6
                      required: *ref_7
                    fees:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_6
                      required: *ref_7
                    transactionType:
                      title: TransactionType
                      type: object
                      description: Data model for the complex type TransactionType.
                      properties: *ref_54
                      required: *ref_55
                    geoCode:
                      title: GeoCode
                      type: object
                      description: >-
                        Data model for the complex type GeoCode. Indicates the
                        geographic location from where the transaction was
                        initiated.
                      properties: *ref_44
                      required: *ref_45
                    note:
                      title: Note
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Memo assigned to transaction.
                      example: Note sent to Payee.
                    expiration:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_10
                      required: *ref_11
                  required: &ref_130
                    - quoteId
                    - transactionId
                    - payee
                    - payer
                    - amountType
                    - amount
                    - transactionType
              required: &ref_132
                - fspId
                - quotesPostRequest
        required: true
      responses:
        '200':
          description: sync response from POST /quotes
          content: &ref_155
            application/json:
              schema:
                title: QuotesPostResponse
                type: object
                properties: &ref_133
                  quotes:
                    title: QuotesIDPutResponse
                    type: object
                    description: The object sent in the PUT /quotes/{ID} callback.
                    properties:
                      body:
                        type: object
                        properties:
                          transferAmount:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          payeeReceiveAmount:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          payeeFspFee:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          payeeFspCommission:
                            title: Money
                            type: object
                            description: Data model for the complex type Money.
                            properties: *ref_6
                            required: *ref_7
                          expiration:
                            type: string
                            description: >-
                              Date and time until when the quotation is valid
                              and can be honored when used in the subsequent
                              transaction.
                            example: '2016-05-24T08:38:08.699-04:00'
                          geoCode:
                            title: GeoCode
                            type: object
                            description: >-
                              Data model for the complex type GeoCode. Indicates
                              the geographic location from where the transaction
                              was initiated.
                            properties: *ref_44
                            required: *ref_45
                          ilpPacket:
                            title: IlpPacket
                            type: string
                            pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
                            minLength: 1
                            maxLength: 32768
                            description: >-
                              Information for recipient (transport layer
                              information).
                            example: >-
                              AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                          condition:
                            title: IlpCondition
                            type: string
                            pattern: ^[A-Za-z0-9-_]{43}$
                            maxLength: 48
                            description: >-
                              Condition that must be attached to the transfer by
                              the Payer.
                          extensionList:
                            title: ExtensionList
                            type: object
                            description: >-
                              Data model for the complex type ExtensionList. An
                              optional list of extensions, specific to
                              deployment.
                            properties: *ref_10
                            required: *ref_11
                        required:
                          - transferAmount
                          - expiration
                          - ilpPacket
                          - condition
                      headers:
                        type: object
                    required:
                      - body
                      - headers
                  currentState:
                    type: string
                    enum: *ref_69
                required: &ref_134
                  - quotes
                  - currentState
        '500':
          description: An error occurred processing the quotes request
          content: &ref_156
            application/json:
              schema:
                allOf: &ref_135
                  - type: object
                    properties: *ref_22
                  - type: object
  /simpleTransfers:
    post:
      summary: Simple Transfers endpoint
      description: is used to request a transfer
      tags:
        - transfers
      operationId: SimpleTransfersPost
      requestBody:
        description: Simple Transfer request payload
        content:
          application/json:
            schema:
              title: SimpleTransfersPostRequest
              type: object
              properties: &ref_138
                fspId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
                transfersPostRequest:
                  title: TransfersPostRequest
                  type: object
                  description: The object sent in the POST /transfers request.
                  properties: &ref_136
                    transferId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    payeeFsp:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    payerFsp:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    amount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_6
                      required: *ref_7
                    ilpPacket:
                      title: IlpPacket
                      type: string
                      pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
                      minLength: 1
                      maxLength: 32768
                      description: Information for recipient (transport layer information).
                      example: >-
                        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                    condition:
                      title: IlpCondition
                      type: string
                      pattern: ^[A-Za-z0-9-_]{43}$
                      maxLength: 48
                      description: >-
                        Condition that must be attached to the transfer by the
                        Payer.
                    expiration:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_10
                      required: *ref_11
                  required: &ref_137
                    - transferId
                    - payeeFsp
                    - payerFsp
                    - amount
                    - ilpPacket
                    - condition
                    - expiration
              required: &ref_139
                - fspId
                - transfersPostRequest
        required: true
      responses:
        '200':
          description: sync response from POST /simpleTransfers
          content: &ref_157
            application/json:
              schema:
                title: SimpleTransfersPostResponse
                type: object
                properties: &ref_140
                  transfer:
                    properties:
                      body:
                        title: TransfersIDPutResponse
                        type: object
                        description: The object sent in the PUT /transfers/{ID} callback.
                        properties: *ref_20
                        required: *ref_21
                      headers:
                        type: object
                    required:
                      - body
                      - headers
                  currentState:
                    type: string
                    enum: *ref_69
                required: &ref_141
                  - transfer
                  - currentState
        '500':
          description: An error occurred processing the simple transfers request
          content: &ref_158
            application/json:
              schema:
                allOf: &ref_142
                  - type: object
                    properties: *ref_22
                  - type: object
components:
  schemas:
    TransactionInitiatorType:
      title: TransactionInitiatorType
      type: string
      enum: *ref_52
      description: |-
        Below are the allowed values for the enumeration.
        - CONSUMER - Consumer is the initiator of the transaction.
        - AGENT - Agent is the initiator of the transaction.
        - BUSINESS - Business is the initiator of the transaction.
        - DEVICE - Device is the initiator of the transaction.
      example: CONSUMER
    PartyIdType:
      title: PartyIdType
      type: string
      enum: *ref_23
      description: >-
        Below are the allowed values for the enumeration.

        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
        Number, that is, the phone number) is used as reference to a
        participant. The MSISDN identifier should be in international format
        according to the [ITU-T E.164
        standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the
        MSISDN may be prefixed by a single plus sign, indicating the
        international prefix.

        - EMAIL - An email is used as reference to a participant. The format of
        the email should be according to the informational [RFC
        3696](https://tools.ietf.org/html/rfc3696).

        - PERSONAL_ID - A personal identifier is used as reference to a
        participant. Examples of personal identification are passport number,
        birth certificate number, and national registration number. The
        identifier number is added in the PartyIdentifier element. The personal
        identifier type is added in the PartySubIdOrType element.

        - BUSINESS - A specific Business (for example, an organization or a
        company) is used as reference to a participant. The BUSINESS identifier
        can be in any format. To make a transaction connected to a specific
        username or bill number in a Business, the PartySubIdOrType element
        should be used.

        - DEVICE - A specific device (for example, a POS or ATM) ID connected to
        a specific business or organization is used as reference to a Party. For
        referencing a specific device under a specific business or organization,
        use the PartySubIdOrType element.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as
        reference to a participant. The ACCOUNT_ID identifier can be in any
        format, as formats can greatly differ depending on country and FSP.

        - IBAN - A bank account number or FSP account ID is used as reference to
        a participant. The IBAN identifier can consist of up to 34 alphanumeric
        characters and should be entered without whitespace.

        - ALIAS An alias is used as reference to a participant. The alias should
        be created in the FSP as an alternative reference to an account owner.
        Another example of an alias is a username in the FSP system. The ALIAS
        identifier can be in any format. It is also possible to use the
        PartySubIdOrType element for identifying an account under an Alias
        defined by the PartyIdentifier.
    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.
      example: '16135551212'
    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.
    Name:
      title: Name
      type: string
      pattern: ^(?!\s*$)[\w .,'-]{1,128}$
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.


        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ).


        **Note:** In some programming languages, Unicode support must be
        specifically enabled. For example, if Java is used, the flag
        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: First name of the Party (Name Type).
      example: Henrik
    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: Middle name of the Party (Name Type).
      example: Johannes
    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: Last name of the Party (Name Type).
      example: Karlsson
    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.
      example: '1966-06-16'
    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: ^[\d]{1,4}$
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties: *ref_8
      required: *ref_9
    extensionListEmptiable:
      type: array
      items: *ref_2
      minItems: 0
      maxItems: 16
    transferParty:
      type: object
      required: *ref_0
      properties: *ref_1
    AmountType:
      title: AmountType
      type: string
      enum: *ref_3
      description: >-
        Below are the allowed values for the enumeration AmountType.

        - SEND - Amount the Payer would like to send, that is, the amount that
        should be withdrawn from the Payer account including any fees.

        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
        the amount that should be sent to the receiver exclusive of any fees.
      example: RECEIVE
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum: *ref_4
    Amount:
      title: Amount
      type: string
      pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
      description: >-
        The API data type Amount is a JSON String in a canonical format that is
        restricted by a regular expression for interoperability reasons. This
        pattern does not allow any trailing zeroes at all, but allows an amount
        without a minor currency unit. It also only allows four digits in the
        minor currency unit; a negative value is not allowed. Using more than 18
        digits in the major currency unit is not allowed.
      example: '123.45'
    transferTransactionType:
      title: transferTransactionType
      type: string
      enum: *ref_5
      description: Type of transaction.
    Note:
      title: Note
      type: string
      minLength: 1
      maxLength: 128
      description: Memo assigned to transaction.
      example: Note sent to Payee.
    transferRequest:
      type: object
      required: *ref_70
      properties: *ref_71
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
    transferStatus:
      type: string
      enum: *ref_19
    Money:
      title: Money
      type: object
      description: Data model for the complex type Money.
      properties: *ref_6
      required: *ref_7
    DateTime:
      title: DateTime
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: >-
        The API data type DateTime is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons. The
        format is according to [ISO
        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed
        in a combined date, time and time zone format. A more readable version
        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
        "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z
        indicates Zulu time zone, same as UTC).
      example: '2016-05-24T08:38:08.699-04:00'
    Latitude:
      title: Latitude
      type: string
      pattern: >-
        ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Latitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+45.4215'
    Longitude:
      title: Longitude
      type: string
      pattern: >-
        ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Longitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+75.6972'
    GeoCode:
      title: GeoCode
      type: object
      description: >-
        Data model for the complex type GeoCode. Indicates the geographic
        location from where the transaction was initiated.
      properties: *ref_44
      required: *ref_45
    IlpPacket:
      title: IlpPacket
      type: string
      pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
      minLength: 1
      maxLength: 32768
      description: Information for recipient (transport layer information).
      example: >-
        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
    IlpCondition:
      title: IlpCondition
      type: string
      pattern: ^[A-Za-z0-9-_]{43}$
      maxLength: 48
      description: Condition that must be attached to the transfer by the Payer.
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties: *ref_10
      required: *ref_11
    QuotesIDPutResponse:
      title: QuotesIDPutResponse
      type: object
      description: The object sent in the PUT /quotes/{ID} callback.
      properties: *ref_56
      required: *ref_57
    IlpFulfilment:
      title: IlpFulfilment
      type: string
      pattern: ^[A-Za-z0-9-_]{43}$
      maxLength: 48
      description: Fulfilment that must be attached to the transfer by the Payee.
      example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
    TransferState:
      title: TransferState
      type: string
      enum: *ref_27
      description: >-
        Below are the allowed values for the enumeration.

        - RECEIVED - Next ledger has received the transfer.

        - RESERVED - Next ledger has reserved the transfer.

        - COMMITTED - Next ledger has successfully performed the transfer.

        - ABORTED - Next ledger has aborted the transfer due to a rejection or
        failure to perform the transfer.
      example: RESERVED
    TransfersIDPutResponse:
      title: TransfersIDPutResponse
      type: object
      description: The object sent in the PUT /transfers/{ID} callback.
      properties: *ref_20
      required: *ref_21
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: ^[1-9]\d{3}$
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
      example: '5100'
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties: *ref_63
      required: *ref_64
    mojaloopError:
      type: object
      properties: *ref_36
    transferError:
      type: object
      description: >-
        This object represents a Mojaloop API error received at any time during
        the transfer process
      properties: *ref_26
    transferResponse:
      type: object
      required: *ref_12
      properties: *ref_13
    errorResponse:
      type: object
      properties: *ref_22
    errorTransferResponse:
      allOf: *ref_14
    transferStatusResponse:
      type: object
      required: *ref_72
      properties: *ref_73
    transferContinuationAcceptParty:
      type: object
      required: *ref_28
      properties: *ref_29
    transferContinuationAcceptQuote:
      type: object
      required: *ref_32
      properties: *ref_33
    autoAcceptPartyOption:
      type: object
      required: *ref_74
      properties: *ref_75
    bulkPerTransferFeeLimit:
      type: object
      required: *ref_76
      properties: *ref_77
    autoAcceptQuote:
      type: object
      required: *ref_78
      properties: *ref_79
    bulkTransactionOptions:
      type: object
      required: *ref_80
      properties: *ref_81
    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: >-
        Data model for the complex type PartyIdInfo. An ExtensionList element
        has been added to this reqeust in version v1.1
      properties: *ref_82
      required: *ref_83
    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.
    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties: *ref_84
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties: *ref_85
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties: *ref_24
      required: *ref_25
    bulkTransactionIndividualTransfer:
      title: BulkTransactionIndividualTransfer
      type: object
      description: Data model for the complex type 'bulkTransactionIndividualTransfer'.
      properties: *ref_86
      required: *ref_87
    bulkTransactionRequest:
      type: object
      required: *ref_88
      properties: *ref_89
    bulkTransferStatus:
      type: string
      enum: *ref_43
    individualTransferResult:
      type: object
      required: *ref_90
      properties: *ref_91
    bulkTransferResponse:
      type: object
      required: *ref_39
      properties: *ref_40
    bulkTransferErrorResponse:
      allOf: *ref_92
    bulkTransactionIndividualTransferAccept:
      type: object
      description: Data model for the 'individualTransfer' while accepting party or quote.
      properties: *ref_30
      required: *ref_31
    bulkTransactionContinuationAcceptParty:
      description: >-
        The object sent back as confirmation of payee parties when
        autoAcceptParty is false.
      type: object
      required: *ref_34
      properties: *ref_35
    bulkTransactionContinuationAcceptQuote:
      description: >-
        The object sent back as confirmation of quotes when autoAcceptQuotes is
        false.
      type: object
      required: *ref_37
      properties: *ref_38
    partyError:
      type: object
      description: >-
        This object represents a Mojaloop API error received at any time during
        the party discovery process
      properties: *ref_93
    bulkTransactionAcceptPartyErrorResponse:
      allOf: *ref_94
    quoteError:
      type: object
      description: >-
        This object represents a Mojaloop API error received at any time during
        the quote process
      properties: *ref_46
    bulkTransactionAcceptQuoteErrorResponse:
      allOf: *ref_95
    individualTransfer:
      title: IndividualTransfer
      type: object
      description: Data model for the complex type 'individualTransfer'.
      properties: *ref_96
      required: *ref_97
    bulkTransferRequest:
      type: object
      required: *ref_98
      properties: *ref_99
    individualTransferFulfilment:
      type: object
      description: >-
        A Mojaloop API transfer fulfilment for individual transfers in a bulk
        transfer
      properties: *ref_100
    bulkTransferStatusResponse:
      type: object
      required: *ref_101
      properties: *ref_102
    individualQuote:
      title: IndividualQuote
      type: object
      description: Data model for the complex type 'individualQuote'.
      properties: *ref_50
      required: *ref_51
    bulkQuoteRequest:
      type: object
      required: *ref_103
      properties: *ref_104
    individualQuoteResult:
      type: object
      properties: *ref_105
      required: *ref_106
    bulkQuoteResponse:
      type: object
      required: *ref_47
      properties: *ref_48
    bulkQuoteErrorResponse:
      allOf: *ref_49
    bulkQuoteStatus:
      type: string
      enum: *ref_107
    bulkQuoteStatusResponse:
      type: object
      required: *ref_108
      properties: *ref_109
    TransactionScenario:
      title: TransactionScenario
      type: string
      enum: *ref_110
      description: >-
        Below are the allowed values for the enumeration.

        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a
        normal scenario, electronic funds are transferred from a Business
        account to a Consumer account, and physical cash is given from the
        Consumer to the Business User.

        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
        In a normal scenario, electronic funds are transferred from a Consumer’s
        account to a Business account, and physical cash is given from the
        Business User to the Consumer.

        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
        Consumer) transaction.

        - PAYMENT - Usually used for performing a transaction from a Consumer to
        a Merchant or Organization, but could also be for a B2B (Business to
        Business) payment. The transaction could be online for a purchase in an
        Internet store, in a physical store where both the Consumer and Business
        User are present, a bill payment, a donation, and so on.

        - REFUND - Used for performing a refund of transaction.
      example: DEPOSIT
    TransactionSubScenario:
      title: TransactionSubScenario
      type: string
      pattern: ^[A-Z_]{1,32}$
      description: >-
        Possible sub-scenario, defined locally within the scheme (UndefinedEnum
        Type).
      example: LOCALLY_DEFINED_SUBSCENARIO
    TransactionInitiator:
      title: TransactionInitiator
      type: string
      enum: *ref_53
      description: >-
        Below are the allowed values for the enumeration.

        - PAYER - Sender of funds is initiating the transaction. The account to
        send from is either owned by the Payer or is connected to the Payer in
        some way.

        - PAYEE - Recipient of the funds is initiating the transaction by
        sending a transaction request. The Payer must approve the transaction,
        either automatically by a pre-generated OTP or by pre-approval of the
        Payee, or by manually approving in his or her own Device.
      example: PAYEE
    RefundReason:
      title: RefundReason
      type: string
      minLength: 1
      maxLength: 128
      description: Reason for the refund.
      example: Free text indicating reason for the refund.
    Refund:
      title: Refund
      type: object
      description: Data model for the complex type Refund.
      properties: *ref_111
      required: *ref_112
    BalanceOfPayments:
      title: BalanceOfPayments
      type: string
      pattern: ^[1-9]\d{2}$
      description: >-
        (BopCode) The API data type
        [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String
        of 3 characters, consisting of digits only. Negative numbers are not
        allowed. A leading zero is not allowed.
      example: '123'
    TransactionType:
      title: TransactionType
      type: object
      description: Data model for the complex type TransactionType.
      properties: *ref_54
      required: *ref_55
    requestToPayRequest:
      type: object
      required: *ref_113
      properties: *ref_114
    AuthenticationType:
      title: AuthenticationType
      type: string
      enum: *ref_115
      description: |-
        Below are the allowed values for the enumeration AuthenticationType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F - U2F is a new addition isolated to Thirdparty stream.
      example: OTP
    TransactionRequestState:
      title: TransactionRequestState
      type: string
      enum: *ref_116
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
        - PENDING - Payer FSP has sent the transaction request to the Payer.
        - ACCEPTED - Payer has approved the transaction.
        - REJECTED - Payer has rejected the transaction.
      example: RECEIVED
    requestToPayResponse:
      type: object
      required: *ref_117
      properties: *ref_118
    requestToPayTransferRequest:
      type: object
      required: *ref_119
      properties: *ref_120
    requestToPayTransferResponse:
      type: object
      required: *ref_121
      properties: *ref_122
    transferContinuationAcceptOTP:
      type: object
      required: *ref_123
      properties: *ref_124
    accountsRequest:
      type: array
      items: *ref_58
    accountCreationStatus:
      type: array
      items: *ref_125
    accountsCreationState:
      type: string
      enum: *ref_126
    accountsResponse:
      type: object
      required: *ref_59
      properties: *ref_60
    errorAccountsResponse:
      allOf: *ref_62
    async2SyncCurrentState:
      type: string
      enum: *ref_69
    partiesByIdResponse:
      title: partiesByIdResponse
      type: object
      description: GET /parties/{Type}/{ID} response object
      properties: *ref_127
      required: *ref_128
    QuotesPostRequest:
      title: QuotesPostRequest
      type: object
      description: The object sent in the POST /quotes request.
      properties: *ref_129
      required: *ref_130
    simpleQuotesPostRequest:
      title: simpleQuotesPostRequest
      type: object
      properties: *ref_131
      required: *ref_132
    quotesPostResponse:
      title: QuotesPostResponse
      type: object
      properties: *ref_133
      required: *ref_134
    errorQuotesResponse:
      allOf: *ref_135
    TransfersPostRequest:
      title: TransfersPostRequest
      type: object
      description: The object sent in the POST /transfers request.
      properties: *ref_136
      required: *ref_137
    simpleTransfersPostRequest:
      title: SimpleTransfersPostRequest
      type: object
      properties: *ref_138
      required: *ref_139
    simpleTransfersPostResponse:
      title: SimpleTransfersPostResponse
      type: object
      properties: *ref_140
      required: *ref_141
    errorSimpleTransfersResponse:
      allOf: *ref_142
  responses:
    transferSuccess:
      description: Transfer completed successfully
      content: *ref_15
    transferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content: *ref_143
    transferServerError:
      description: An error occurred processing the transfer
      content: *ref_16
    transferTimeout:
      description: Timeout occurred processing the transfer
      content: *ref_17
    bulkTransactionAccepted:
      description: Bulk transfer accepted successfully
    bulkTransferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content: *ref_41
    errorResponse:
      description: Internal Server Error
      content: *ref_42
    bulkTransactionPutBadRequest:
      description: Malformed or missing required body, headers or parameters
      content: *ref_144
    bulkTransferSuccess:
      description: Bulk transfer completed successfully
      content: *ref_145
    bulkQuoteSuccess:
      description: Bulk quote completed successfully
      content: *ref_146
    bulkQuoteBadRequest:
      description: Malformed or missing required body, headers or parameters
      content: *ref_147
    bulkQuoteServerError:
      description: An error occurred processing the bulk quote
      content: *ref_148
    bulkQuoteTimeout:
      description: Timeout occurred processing the bulk quote
      content: *ref_149
    requestToPaySuccess:
      description: Request to Pay completed successfully
      content: *ref_150
    requestToPayTransferSuccess:
      description: Transfer completed successfully
      content: *ref_151
    requestToPayTransferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content: *ref_152
    accountsCreationCompleted:
      description: Accounts creation completed
      content: *ref_153
    accountsCreationError:
      description: An error occurred creating accounts
      content: *ref_61
    accountsCreationTimeout:
      description: Timeout occurred creating accounts
      content: *ref_154
    partiesByIdSuccess:
      description: PartiesByIdSuccess
      content: *ref_67
    partiesByIdError404:
      description: PartiesByIdError404
      content: *ref_68
    quotesPostSuccess:
      description: sync response from POST /quotes
      content: *ref_155
    quotesServerError:
      description: An error occurred processing the quotes request
      content: *ref_156
    simpleTransfersPostSuccess:
      description: sync response from POST /simpleTransfers
      content: *ref_157
    simpleTransfersServerError:
      description: An error occurred processing the simple transfers request
      content: *ref_158
  parameters:
    transferId:
      name: transferId
      in: path
      required: true
      schema: *ref_18
      description: >-
        Identifier of the transfer to continue as returned in the response to a
        `POST /transfers` request.
    bulkTransactionId:
      name: bulkTransactionId
      in: path
      required: true
      schema: *ref_159
      description: >-
        Identifier of the bulk transaction to continue as returned in the
        response to a `POST /bulkTransaction` request.
    bulkTransferId:
      name: bulkTransferId
      in: path
      required: true
      schema: *ref_160
      description: >-
        Identifier of the bulk transfer to continue as returned in the response
        to a `POST /bulkTransfers` request.
    bulkQuoteId:
      name: bulkQuoteId
      in: path
      required: true
      schema: *ref_161
      description: >-
        Identifier of the bulk transfer to continue as returned in the response
        to a `POST /bulkTransfers` request.
    requestToPayTransactionId:
      name: requestToPayTransactionId
      in: path
      required: true
      schema: *ref_162
      description: >-
        Identifier of the merchant request to pay transfer to continue as
        returned in the response to a `POST /requestToPayTransfer` request.
    Type:
      name: Type
      in: path
      required: true
      schema: *ref_65
      description: The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.
    ID:
      name: ID
      in: path
      required: true
      schema: *ref_66
      description: The identifier value.
    SubId:
      name: SubId
      in: path
      required: true
      schema: *ref_163
      description: >-
        A sub-identifier of the party identifier, or a sub-type of the party
        identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`.