version: '3.7'
networks:
  mojaloop-net:
    name: mojaloop-net

services:

  redis:
    networks:
        - mojaloop-net
    image: "redis:5.0.4-alpine"
    cap_add:
      - NET_ADMIN
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD" ,"sh", "-c", "redis-cli","ping"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s

  ttksim1-sdk-api-svc:
    extends:
      file: common-sdk.yml
      service: api-svc
    networks:
      - mojaloop-net
    env_file: ./config/sdk-ttksim1/api-svc.env
    command: yarn workspace @mojaloop/sdk-scheme-adapter-api-svc run start:debug
    ports:
      - "14000:4000"
      - "14001:4001"
      - "14002:4002"
      - "19221:9229"
    depends_on:
      redis:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully

  ttksim1-sdk-outbound-command-event-handler:
    extends:
      file: common-sdk.yml
      service: outbound-command-event-handler
    env_file: ./config/sdk-ttksim1/outbound-command-event-handler.env
    command: yarn workspace @mojaloop/sdk-scheme-adapter-outbound-command-event-handler run start:debug
    ports:
      - "18000:8000"
      - "19222:9229"
    networks:
      - mojaloop-net
    depends_on:
      redis:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    profiles:
      - bulk

  ttksim1-sdk-outbound-domain-event-handler:
    extends:
      file: common-sdk.yml
      service: outbound-domain-event-handler
    env_file: ./config/sdk-ttksim1/outbound-domain-event-handler.env
    command: yarn workspace @mojaloop/sdk-scheme-adapter-outbound-domain-event-handler run start:debug
    ports:
      - "18001:8000"
      - "19223:9229"
    networks:
      - mojaloop-net
    depends_on:
      redis:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    profiles:
      - bulk

  ttksim2-sdk-api-svc:
    extends:
      file: common-sdk.yml
      service: api-svc
    env_file: ./config/sdk-ttksim2/api-svc.env
    networks:
      - mojaloop-net
    ports:
      - "24000:4000"
      - "24001:4001"
      - "24002:4002"
    depends_on:
      - redis

  ttksim3-sdk-api-svc:
    extends:
      file: common-sdk.yml
      service: api-svc
    env_file: ./config/sdk-ttksim3/api-svc.env
    networks:
      - mojaloop-net
    ports:
      - "34000:4000"
      - "34001:4001"
      - "34002:4002"
    depends_on:
      - redis

  ttkfxp-sdk-api-svc:
    extends:
      file: common-sdk.yml
      service: api-svc
    env_file: ./config/sdk-ttkfxp/api-svc.env
    networks:
      - mojaloop-net
    ports:
      - "44000:4000"
      - "44001:4001"
      - "44002:4002"
    depends_on:
      - redis


  ttk-ttksim1:
    networks:
        - mojaloop-net
    image: mojaloop/ml-testing-toolkit:v17.3.0-snapshot.1
    container_name: ttk-ttksim1
    user: root
    volumes:
      - "./config/ttk-ttksim1/spec_files:/opt/app/spec_files"
      - "./config/ttk-ttksim1/environments:/opt/app/examples/environments"
    ports:
      - "14040:4040"
      - "15050:5050"
    environment:
      - AUTH_ENABLED=FALSE
    command: npm start
    healthcheck:
      test: ["CMD-SHELL", "nc localhost 4040"]
      interval: 5s
      timeout: 10s
      retries: 3

  ttk-ttksim1-ui:
    image: mojaloop/ml-testing-toolkit-ui:v15.5.0
    ports:
      - "16060:6060"
    networks:
      - mojaloop-net
    environment:
      - API_BASE_URL=http://localhost:15050
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    profiles:
      - debug

  ttk-ttksim2:
    networks:
        - mojaloop-net
    image: mojaloop/ml-testing-toolkit:v17.3.0-snapshot.1
    container_name: ttk-ttksim2
    user: root
    volumes:
      - "./config/ttk-ttksim2/spec_files:/opt/app/spec_files"
    ports:
      - "24040:4040"
      - "25050:5050"
    environment:
      - AUTH_ENABLED=FALSE
    command: npm start

  ttk-ttksim2-ui:
    image: mojaloop/ml-testing-toolkit-ui:v15.5.0
    ports:
      - "26060:6060"
    networks:
      - mojaloop-net
    environment:
      - API_BASE_URL=http://localhost:25050
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    profiles:
      - debug

  ttk-ttksim3:
    networks:
        - mojaloop-net
    image: mojaloop/ml-testing-toolkit:v17.3.0-snapshot.1
    container_name: ttk-ttksim3
    user: root
    volumes:
      - "./config/ttk-ttksim3/spec_files:/opt/app/spec_files"
    ports:
      - "34040:4040"
      - "35050:5050"
    environment:
      - AUTH_ENABLED=FALSE
    command: npm start

  ttk-ttksim3-ui:
    image: mojaloop/ml-testing-toolkit-ui:v15.5.0
    ports:
      - "36060:6060"
    networks:
      - mojaloop-net
    environment:
      - API_BASE_URL=http://localhost:35050
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    profiles:
      - debug


  ttk-ttkfxp:
    networks:
        - mojaloop-net
    image: mojaloop/ml-testing-toolkit:v17.3.0-snapshot.1
    container_name: ttk-ttkfxp
    user: root
    volumes:
      - "./config/ttk-ttkfxp/spec_files:/opt/app/spec_files"
    ports:
      - "44040:4040"
      - "45050:5050"
    environment:
      - AUTH_ENABLED=FALSE
    command: npm start

  ttk-ttkfxp-ui:
    image: mojaloop/ml-testing-toolkit-ui:v15.5.0
    ports:
      - "46060:6060"
    networks:
      - mojaloop-net
    environment:
      - API_BASE_URL=http://localhost:45050
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    profiles:
      - debug

  ttk-hub:
    networks:
        - mojaloop-net
    image: mojaloop/ml-testing-toolkit:v17.3.0-snapshot.1
    container_name: ttk-hub
    user: root
    volumes:
      - "./config/ttk-hub/spec_files:/opt/app/spec_files"
      - "./config/ttk-hub/environments:/opt/app/examples/environments"
    ports:
      - "54040:4040"
      - "55050:5050"
    environment:
      - AUTH_ENABLED=FALSE
    command: npm start

  ttk-hub-ui:
    image: mojaloop/ml-testing-toolkit-ui:v15.5.0
    ports:
      - "56060:6060"
    networks:
      - mojaloop-net
    environment:
      - API_BASE_URL=http://localhost:55050
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    profiles:
      - debug

  kafka:
    networks:
      - mojaloop-net
    restart: "no"
    image: docker.io/bitnami/kafka:3.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # BITNAMI_DEBUG: "yes"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093,LISTENER_DOCKER://kafka:29092,LISTENER_EXTERN://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_EXTERN://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER:PLAINTEXT,LISTENER_EXTERN:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_MESSAGE_MAX_BYTES: 200000000
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      KAFKA_ENABLE_KRAFT: "true"
    healthcheck:
      test: ["CMD" ,"/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh","--bootstrap-server","kafka:9092"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s
    profiles:
      - bulk

  init-kafka:
    networks:
      - mojaloop-net
    image: docker.io/bitnami/kafka:3.2
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim1-topic-sdk-outbound-command-events --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim1-topic-sdk-outbound-domain-events --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim2-topic-sdk-outbound-command-events --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim2-topic-sdk-outbound-domain-events --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim3-topic-sdk-outbound-command-events --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ttksim3-topic-sdk-outbound-domain-events --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    profiles:
      - bulk

  kafka-debug-ui:
    image: docker.redpanda.com/redpandadata/console:v2.3.7
    deploy:
      replicas: 1
    restart: on-failure
    ports:
    - "9080:8080"
    networks:
      - mojaloop-net
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka
    profiles:
      - debug

  # redisinsight:
  #   image: redislabs/redisinsight
  #   ports:
  #     - "9001:8001"
  #   networks:
  #     - mojaloop-net
  #   volumes: []
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD" ,"sh", "-c", "curl http://localhost:8001/api/instance/"]
  #     timeout: 20s
  #     retries: 30
  #     start_period: 5s
  #     interval: 5s
  #   profiles:
  #     - debug

  # init-redisinsight:
  #   networks:
  #     - mojaloop-net
  #   image: curlimages/curl:7.86.0
  #   depends_on:
  #     redisinsight:
  #       condition: service_healthy
  #   command: "--location --request POST 'http://redisinsight:8001/api/instance/' --header 'Content-Type: application/json' --data-raw '{\"name\": \"Redis DB\",\"connectionType\": \"STANDALONE\",\"host\": \"redis\",\"port\": 6379}'"
  #   profiles:
  #     - debug
