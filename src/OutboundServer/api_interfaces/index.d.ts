import { components } from './openapi'
export * as openapi from './openapi'
export declare namespace Schemas {
  type TransactionInitiatorType = components['schemas']['TransactionInitiatorType'];
  type PartyIdType = components['schemas']['PartyIdType'];
  type PartyIdentifier = components['schemas']['PartyIdentifier'];
  type PartySubIdOrType = components['schemas']['PartySubIdOrType'];
  type Name = components['schemas']['Name'];
  type FirstName = components['schemas']['FirstName'];
  type MiddleName = components['schemas']['MiddleName'];
  type LastName = components['schemas']['LastName'];
  type DateOfBirth = components['schemas']['DateOfBirth'];
  type MerchantClassificationCode = components['schemas']['MerchantClassificationCode'];
  type FspId = components['schemas']['FspId'];
  type ExtensionKey = components['schemas']['ExtensionKey'];
  type ExtensionValue = components['schemas']['ExtensionValue'];
  type Extension = components['schemas']['Extension'];
  type extensionListEmptiable = components['schemas']['extensionListEmptiable'];
  type transferParty = components['schemas']['transferParty'];
  type AmountType = components['schemas']['AmountType'];
  type Currency = components['schemas']['Currency'];
  type Amount = components['schemas']['Amount'];
  type transactionType = components['schemas']['transactionType'];
  type Note = components['schemas']['Note'];
  type transferRequest = components['schemas']['transferRequest'];
  type CorrelationId = components['schemas']['CorrelationId'];
  type transferStatus = components['schemas']['transferStatus'];
  type Money = components['schemas']['Money'];
  type DateTime = components['schemas']['DateTime'];
  type Latitude = components['schemas']['Latitude'];
  type Longitude = components['schemas']['Longitude'];
  type GeoCode = components['schemas']['GeoCode'];
  type IlpPacket = components['schemas']['IlpPacket'];
  type IlpCondition = components['schemas']['IlpCondition'];
  type ExtensionList = components['schemas']['ExtensionList'];
  type QuotesIDPutResponse = components['schemas']['QuotesIDPutResponse'];
  type IlpFulfilment = components['schemas']['IlpFulfilment'];
  type TransferState = components['schemas']['TransferState'];
  type TransfersIDPutResponse = components['schemas']['TransfersIDPutResponse'];
  type ErrorCode = components['schemas']['ErrorCode'];
  type ErrorDescription = components['schemas']['ErrorDescription'];
  type ErrorInformation = components['schemas']['ErrorInformation'];
  type mojaloopError = components['schemas']['mojaloopError'];
  type transferError = components['schemas']['transferError'];
  type transferResponse = components['schemas']['transferResponse'];
  type errorResponse = components['schemas']['errorResponse'];
  type errorTransferResponse = components['schemas']['errorTransferResponse'];
  type transferStatusResponse = components['schemas']['transferStatusResponse'];
  type transferContinuationAcceptParty = components['schemas']['transferContinuationAcceptParty'];
  type transferContinuationAcceptQuote = components['schemas']['transferContinuationAcceptQuote'];
  type individualTransfer = components['schemas']['individualTransfer'];
  type bulkTransferRequest = components['schemas']['bulkTransferRequest'];
  type individualTransferResult = components['schemas']['individualTransferResult'];
  type bulkTransferResponse = components['schemas']['bulkTransferResponse'];
  type bulkTransferErrorResponse = components['schemas']['bulkTransferErrorResponse'];
  type bulkTransferStatus = components['schemas']['bulkTransferStatus'];
  type individualTransferFulfilment = components['schemas']['individualTransferFulfilment'];
  type bulkTransferStatusResponse = components['schemas']['bulkTransferStatusResponse'];
  type individualQuote = components['schemas']['individualQuote'];
  type bulkQuoteRequest = components['schemas']['bulkQuoteRequest'];
  type quoteError = components['schemas']['quoteError'];
  type individualQuoteResult = components['schemas']['individualQuoteResult'];
  type bulkQuoteResponse = components['schemas']['bulkQuoteResponse'];
  type bulkQuoteErrorResponse = components['schemas']['bulkQuoteErrorResponse'];
  type bulkQuoteStatus = components['schemas']['bulkQuoteStatus'];
  type bulkQuoteStatusResponse = components['schemas']['bulkQuoteStatusResponse'];
  type TransactionScenario = components['schemas']['TransactionScenario'];
  type TransactionSubScenario = components['schemas']['TransactionSubScenario'];
  type TransactionInitiator = components['schemas']['TransactionInitiator'];
  type RefundReason = components['schemas']['RefundReason'];
  type Refund = components['schemas']['Refund'];
  type BalanceOfPayments = components['schemas']['BalanceOfPayments'];
  type TransactionType = components['schemas']['TransactionType'];
  type requestToPayRequest = components['schemas']['requestToPayRequest'];
  type AuthenticationType = components['schemas']['AuthenticationType'];
  type TransactionRequestState = components['schemas']['TransactionRequestState'];
  type requestToPayResponse = components['schemas']['requestToPayResponse'];
  type requestToPayTransferRequest = components['schemas']['requestToPayTransferRequest'];
  type requestToPayTransferResponse = components['schemas']['requestToPayTransferResponse'];
  type transferContinuationAcceptOTP = components['schemas']['transferContinuationAcceptOTP'];
  type accountsRequest = components['schemas']['accountsRequest'];
  type accountCreationStatus = components['schemas']['accountCreationStatus'];
  type accountsCreationState = components['schemas']['accountsCreationState'];
  type accountsResponse = components['schemas']['accountsResponse'];
  type errorAccountsResponse = components['schemas']['errorAccountsResponse'];
  type AccountAddress = components['schemas']['AccountAddress'];
  type Account = components['schemas']['Account'];
  type AccountList = components['schemas']['AccountList'];
  type PartyIdInfo = components['schemas']['PartyIdInfo'];
  type PartyName = components['schemas']['PartyName'];
  type PartyComplexName = components['schemas']['PartyComplexName'];
  type PartyPersonalInfo = components['schemas']['PartyPersonalInfo'];
  type Party = components['schemas']['Party'];
  type async2SyncCurrentState = components['schemas']['async2SyncCurrentState'];
  type partiesByIdResponse = components['schemas']['partiesByIdResponse'];
  type QuotesPostRequest = components['schemas']['QuotesPostRequest'];
  type quotesPostRequest = components['schemas']['quotesPostRequest'];
  type quotesPostResponse = components['schemas']['quotesPostResponse'];
  type errorQuotesResponse = components['schemas']['errorQuotesResponse'];
  type TransfersPostRequest = components['schemas']['TransfersPostRequest'];
  type simpleTransfersPostRequest = components['schemas']['simpleTransfersPostRequest'];
  type simpleTransfersPostResponse = components['schemas']['simpleTransfersPostResponse'];
  type errorSimpleTransfersResponse = components['schemas']['errorSimpleTransfersResponse'];
  type AuthorizationChannelType = components['schemas']['AuthorizationChannelType'];
  type Integer = components['schemas']['Integer'];
  type AuthorizationsPostRequest = components['schemas']['AuthorizationsPostRequest'];
  type authorizationsPostRequest = components['schemas']['authorizationsPostRequest'];
  type OtpValue = components['schemas']['OtpValue'];
  type QRCODE = components['schemas']['QRCODE'];
  type U2FPIN = components['schemas']['U2FPIN'];
  type U2FPinValue = components['schemas']['U2FPinValue'];
  type AuthenticationValue = components['schemas']['AuthenticationValue'];
  type AuthenticationInfo = components['schemas']['AuthenticationInfo'];
  type AuthorizationResponseType = components['schemas']['AuthorizationResponseType'];
  type authorizationsPostResponse = components['schemas']['authorizationsPostResponse'];
  type errorAuthorizationsResponse = components['schemas']['errorAuthorizationsResponse'];
}