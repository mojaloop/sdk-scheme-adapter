/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** This endpoint allows a user of the SDK scheme adapter to check the outbound transfers service is listening. */
    get: {
      responses: {
        /** Returns empty body if the scheme adapter outbound transfers service is running. */
        200: unknown;
      };
    };
  };
  "/transfers": {
    /**
     * The HTTP request `POST /transfers` is used to request the movement of funds from payer DFSP to payee DFSP.
     * The underlying Mojaloop API has three stages for money transfer:
     *
     *   1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
     *   2. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
     *   3. Transfer. The enactment of the previously agreed "contract"
     *
     * This method has several modes of operation.
     * - If the configuration variables `AUTO_ACCEPT_PARTIES` is set to `"false"` this method will terminate when the payee party has been resolved and return the payee party details.
     *   If the payee wishes to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the payee party) is required to continue the operation.
     *   The scheme adapter will then proceed with quotation stage...
     *
     * - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
     *   If the payee wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete. Upon completion it will return the entire set of transfer details received during the operation.
     *
     * Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["transferRequest"];
      };
      responses: {
        200: components["responses"]["transferSuccess"];
        400: components["responses"]["transferBadRequest"];
        500: components["responses"]["transferServerError"];
        504: components["responses"]["transferTimeout"];
      };
    };
  };
  "/transfers/{transferId}": {
    /**
     * The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.
     *
     * The request body should contain either the "acceptParty" or "acceptQuote" property set to `true` as required to continue the transfer.
     *
     * See the description of the `POST /transfers` HTTP method for more information on modes of transfer.
     */
    put: {
      parameters: {
        path: {
          transferId: components["parameters"]["transferId"];
        };
      };
      requestBody: {
        "application/json":
          | components["schemas"]["transferContinuationAcceptParty"]
          | components["schemas"]["transferContinuationAcceptQuote"];
      };
      responses: {
        200: components["responses"]["transferSuccess"];
        500: components["responses"]["transferServerError"];
        504: components["responses"]["transferTimeout"];
      };
    };
    /** The HTTP request `GET /transfers/{transferId}` is used to get information regarding a transfer created or requested earlier. The `{transferId}` in the URI should contain the `transferId` that was used for the creation of the transfer. */
    get: {
      parameters: {
        path: {
          transferId: components["parameters"]["transferId"];
        };
      };
      responses: {
        /** Transfer information successfully retrieved */
        200: {
          "application/json": components["schemas"]["transferStatusResponse"];
        };
        /** An error occurred processing the transfer */
        500: {
          "application/json": components["schemas"]["errorResponse"];
        };
      };
    };
  };
  "/bulkTransfers": {
    /** The HTTP request `POST /bulkTransfers` is used to request the movement of funds from payer DFSP to payees' DFSP. */
    post: {
      requestBody: {
        "application/json": components["schemas"]["bulkTransferRequest"];
      };
      responses: {
        200: components["responses"]["bulkTransferSuccess"];
        400: components["responses"]["bulkTransferBadRequest"];
        500: components["responses"]["bulkTransferServerError"];
        504: components["responses"]["bulkTransferTimeout"];
      };
    };
  };
  "/bulkTransfers/{bulkTransferId}": {
    /** The HTTP request `GET /bulkTransfers/{bulktTransferId}` is used to get information regarding a bulk transfer created or requested earlier. The `{bulkTransferId}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer. */
    get: {
      parameters: {
        path: {
          bulkTransferId: components["parameters"]["bulkTransferId"];
        };
      };
      responses: {
        /** Bulk transfer information successfully retrieved */
        200: {
          "application/json": components["schemas"]["bulkTransferStatusResponse"];
        };
        /** An error occurred processing the bulk transfer */
        500: {
          "application/json": components["schemas"]["errorResponse"];
        };
      };
    };
  };
  "/bulkQuotes": {
    /** The HTTP request `POST /bulkQuotes` is used to request a bulk quote to fascilitate funds transfer from payer DFSP to payees' DFSP. */
    post: {
      requestBody: {
        "application/json": components["schemas"]["bulkQuoteRequest"];
      };
      responses: {
        200: components["responses"]["bulkQuoteSuccess"];
        400: components["responses"]["bulkQuoteBadRequest"];
        500: components["responses"]["bulkQuoteServerError"];
        504: components["responses"]["bulkQuoteTimeout"];
      };
    };
  };
  "/bulkQuotes/{bulkQuoteId}": {
    /** The HTTP request `GET /bulkQuotes/{bulktQuoteId}` is used to get information regarding a bulk quote created or requested earlier. The `{bulkQuoteId}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote. */
    get: {
      parameters: {
        path: {
          bulkQuoteId: components["parameters"]["bulkQuoteId"];
        };
      };
      responses: {
        /** Bulk quote information successfully retrieved */
        200: {
          "application/json": components["schemas"]["bulkQuoteStatusResponse"];
        };
        /** An error occurred processing the bulk quote */
        500: {
          "application/json": components["schemas"]["errorResponse"];
        };
      };
    };
  };
  "/requestToPay": {
    /**
     * The HTTP request `POST /requestToPay` is used to support Pull Funds pattern where in a receiver can request for funds from the Sender.
     * The underlying API has two stages:
     *
     *   1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
     *   2. Transaction Request. This request enables a Payee to request Payer to send electronic funds to the Payee.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["requestToPayRequest"];
      };
      responses: {
        200: components["responses"]["requestToPaySuccess"];
      };
    };
  };
  "/requestToPayTransfer": {
    /**
     * The HTTP request `POST /requestToPayTransfer` is used to request the movement of funds from payer DFSP to payee DFSP.
     * The underlying Mojaloop API has three stages for money transfer:
     *
     *   1. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
     *   2. Authorization. This facilitates getting OTP from payee DFSP.
     *   3. Transfer. The enactment of the previously agreed "contract"
     *
     * This method has several modes of operation.
     * - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
     *   If the payee wished to proceed with the otp, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * - If the configuration variable `AUTO_ACCEPT_OTP` is set to `"false"` this method will terminate and return the otp when it has been received from the payee DFSP.
     *   If the payer wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete. Upon completion it will return the entire set of transfer details received during the operation.
     *
     * Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["requestToPayTransferRequest"];
      };
      responses: {
        200: components["responses"]["requestToPayTransferSuccess"];
        400: components["responses"]["requestToPayTransferBadRequest"];
        500: components["responses"]["transferServerError"];
        504: components["responses"]["transferTimeout"];
      };
    };
  };
  "/requestToPayTransfer/{requestToPayTransactionId}": {
    /**
     * The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.
     *
     * The request body should contain either the "acceptOTP" or "acceptQuote" property set to `true` as required to continue the transfer.
     *
     * See the description of the `POST /requestToPayTransfer` HTTP method for more information on modes of transfer.
     */
    put: {
      parameters: {
        path: {
          requestToPayTransactionId: components["parameters"]["requestToPayTransactionId"];
        };
      };
      requestBody: {
        "application/json":
          | components["schemas"]["transferContinuationAcceptQuote"]
          | components["schemas"]["transferContinuationAcceptOTP"];
      };
      responses: {
        200: components["responses"]["transferSuccess"];
        500: components["responses"]["transferServerError"];
        504: components["responses"]["transferTimeout"];
      };
    };
  };
  "/accounts": {
    /**
     * The HTTP request `POST /accounts` is used to create account information on the Account Lookup Service (ALS) regarding the provided list of identities.
     *
     * Caller DFSP is used as the account source FSP information
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["accountsRequest"];
      };
      responses: {
        200: components["responses"]["accountsCreationCompleted"];
        400: components["responses"]["accountsCreationError"];
        500: components["responses"]["accountsCreationError"];
        504: components["responses"]["accountsCreationTimeout"];
      };
    };
  };
  "/parties/{Type}/{ID}": {
    get: operations["PartiesByTypeAndID"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
      };
    };
  };
  "/parties/{Type}/{ID}/{SubId}": {
    get: operations["PartiesSubIdByTypeAndID"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
        SubId: components["parameters"]["SubId"];
      };
    };
  };
  "/quotes": {
    post: operations["QuotesPost"];
  };
  "/simpleTransfers": {
    post: operations["SimpleTransfersPost"];
  };
}

export interface operations {
  /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
  PartiesByTypeAndID: {
    responses: {
      200: components["responses"]["partiesByIdResponse"];
      404: components["responses"]["partiesByIdError404"];
    };
  };
  /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
  PartiesSubIdByTypeAndID: {
    responses: {
      200: components["responses"]["partiesByIdResponse"];
      404: components["responses"]["partiesByIdError404"];
    };
  };
  /** is used to request quotes from other DFSP */
  QuotesPost: {
    requestBody: {
      "application/json": components["schemas"]["quotesPostRequest"];
    };
    responses: {
      200: components["responses"]["quotesPostSuccess"];
      500: components["responses"]["quotesServerError"];
    };
  };
  /** is used to request a transfer */
  SimpleTransfersPost: {
    requestBody: {
      "application/json": components["schemas"]["simpleTransfersPostRequest"];
    };
    responses: {
      200: components["responses"]["simpleTransfersPostSuccess"];
      500: components["responses"]["simpleTransfersServerError"];
    };
  };
}

export interface components {
  parameters: {
    /** Identifier of the transfer to continue as returned in the response to a `POST /transfers` request. */
    transferId: components["schemas"]["CorrelationId"];
    /** Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
    bulkTransferId: components["schemas"]["CorrelationId"];
    /** Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
    bulkQuoteId: components["schemas"]["CorrelationId"];
    /** Identifier of the merchant request to pay transfer to continue as returned in the response to a `POST /requestToPayTransfer` request. */
    requestToPayTransactionId: components["schemas"]["CorrelationId"];
    /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
    Type: string;
    /** The identifier value. */
    ID: string;
    /** A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
    SubId: string;
  };
  schemas: {
    /**
     * Below are the allowed values for the enumeration.
     * - CONSUMER - Consumer is the initiator of the transaction.
     * - AGENT - Agent is the initiator of the transaction.
     * - BUSINESS - Business is the initiator of the transaction.
     * - DEVICE - Device is the initiator of the transaction.
     */
    TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
    /**
     * This is a variant based on FSPIOP `PartyIdType` specification.
     * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
     *
     * Below are the allowed values for the enumeration.
     * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
     * Number, that is, the phone number) is used as reference to a participant.
     * The MSISDN identifier should be in international format according to the
     * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
     * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
     * international prefix.
     * - EMAIL - An email is used as reference to a
     * participant. The format of the email should be according to the informational
     * [RFC 3696](https://tools.ietf.org/html/rfc3696).
     * - PERSONAL_ID - A personal identifier is used as reference to a participant.
     * Examples of personal identification are passport number, birth certificate
     * number, and national registration number. The identifier number is added in
     * the PartyIdentifier element. The personal identifier type is added in the
     * PartySubIdOrType element.
     * - BUSINESS - A specific Business (for example, an organization or a company)
     * is used as reference to a participant. The BUSINESS identifier can be in any
     * format. To make a transaction connected to a specific username or bill number
     * in a Business, the PartySubIdOrType element should be used.
     * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
     * specific business or organization is used as reference to a Party.
     * For referencing a specific device under a specific business or organization,
     * use the PartySubIdOrType element.
     * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
     * reference to a participant. The ACCOUNT_ID identifier can be in any format,
     * as formats can greatly differ depending on country and FSP.
     * - IBAN - A bank account number or FSP account ID is used as reference to a
     * participant. The IBAN identifier can consist of up to 34 alphanumeric
     * characters and should be entered without whitespace.
     * - ALIAS An alias is used as reference to a participant. The alias should be
     * created in the FSP as an alternative reference to an account owner.
     * Another example of an alias is a username in the FSP system.
     * The ALIAS identifier can be in any format. It is also possible to use the
     * PartySubIdOrType element for identifying an account under an Alias defined
     * by the PartyIdentifier.
     * - CONSENT - TBD
     * - THIRD_PARTY_LINK - TBD
     */
    PartyIdType:
      | "MSISDN"
      | "EMAIL"
      | "PERSONAL_ID"
      | "BUSINESS"
      | "DEVICE"
      | "ACCOUNT_ID"
      | "IBAN"
      | "ALIAS"
      | "CONSENT"
      | "THIRD_PARTY_LINK";
    /** Identifier of the Party. */
    PartyIdentifier: string;
    /** Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType. */
    PartySubIdOrType: string;
    /**
     * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
     *
     * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
     *
     * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
     */
    Name: string;
    /** First name of the Party (Name Type). */
    FirstName: string;
    /** Middle name of the Party (Name Type). */
    MiddleName: string;
    /** Last name of the Party (Name Type). */
    LastName: string;
    /** Date of Birth of the Party. */
    DateOfBirth: string;
    /** A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc. */
    MerchantClassificationCode: string;
    /** FSP identifier. */
    FspId: string;
    /** Extension key. */
    ExtensionKey: string;
    /** Extension value. */
    ExtensionValue: string;
    /** Data model for the complex type Extension. */
    Extension: {
      key: components["schemas"]["ExtensionKey"];
      value: components["schemas"]["ExtensionValue"];
    };
    extensionListEmptiable: components["schemas"]["Extension"][];
    transferParty: {
      type?: components["schemas"]["TransactionInitiatorType"];
      idType: components["schemas"]["PartyIdType"];
      idValue: components["schemas"]["PartyIdentifier"];
      idSubValue?: components["schemas"]["PartySubIdOrType"];
      displayName?: components["schemas"]["Name"];
      firstName?: components["schemas"]["FirstName"];
      middleName?: components["schemas"]["MiddleName"];
      lastName?: components["schemas"]["LastName"];
      dateOfBirth?: components["schemas"]["DateOfBirth"];
      merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
      fspId?: components["schemas"]["FspId"];
      extensionList?: components["schemas"]["extensionListEmptiable"];
    };
    /**
     * Below are the allowed values for the enumeration AmountType.
     * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
     * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
     */
    AmountType: "SEND" | "RECEIVE";
    /** The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies. */
    Currency:
      | "AED"
      | "AFN"
      | "ALL"
      | "AMD"
      | "ANG"
      | "AOA"
      | "ARS"
      | "AUD"
      | "AWG"
      | "AZN"
      | "BAM"
      | "BBD"
      | "BDT"
      | "BGN"
      | "BHD"
      | "BIF"
      | "BMD"
      | "BND"
      | "BOB"
      | "BRL"
      | "BSD"
      | "BTN"
      | "BWP"
      | "BYN"
      | "BZD"
      | "CAD"
      | "CDF"
      | "CHF"
      | "CLP"
      | "CNY"
      | "COP"
      | "CRC"
      | "CUC"
      | "CUP"
      | "CVE"
      | "CZK"
      | "DJF"
      | "DKK"
      | "DOP"
      | "DZD"
      | "EGP"
      | "ERN"
      | "ETB"
      | "EUR"
      | "FJD"
      | "FKP"
      | "GBP"
      | "GEL"
      | "GGP"
      | "GHS"
      | "GIP"
      | "GMD"
      | "GNF"
      | "GTQ"
      | "GYD"
      | "HKD"
      | "HNL"
      | "HRK"
      | "HTG"
      | "HUF"
      | "IDR"
      | "ILS"
      | "IMP"
      | "INR"
      | "IQD"
      | "IRR"
      | "ISK"
      | "JEP"
      | "JMD"
      | "JOD"
      | "JPY"
      | "KES"
      | "KGS"
      | "KHR"
      | "KMF"
      | "KPW"
      | "KRW"
      | "KWD"
      | "KYD"
      | "KZT"
      | "LAK"
      | "LBP"
      | "LKR"
      | "LRD"
      | "LSL"
      | "LYD"
      | "MAD"
      | "MDL"
      | "MGA"
      | "MKD"
      | "MMK"
      | "MNT"
      | "MOP"
      | "MRO"
      | "MUR"
      | "MVR"
      | "MWK"
      | "MXN"
      | "MYR"
      | "MZN"
      | "NAD"
      | "NGN"
      | "NIO"
      | "NOK"
      | "NPR"
      | "NZD"
      | "OMR"
      | "PAB"
      | "PEN"
      | "PGK"
      | "PHP"
      | "PKR"
      | "PLN"
      | "PYG"
      | "QAR"
      | "RON"
      | "RSD"
      | "RUB"
      | "RWF"
      | "SAR"
      | "SBD"
      | "SCR"
      | "SDG"
      | "SEK"
      | "SGD"
      | "SHP"
      | "SLL"
      | "SOS"
      | "SPL"
      | "SRD"
      | "STD"
      | "SVC"
      | "SYP"
      | "SZL"
      | "THB"
      | "TJS"
      | "TMT"
      | "TND"
      | "TOP"
      | "TRY"
      | "TTD"
      | "TVD"
      | "TWD"
      | "TZS"
      | "UAH"
      | "UGX"
      | "USD"
      | "UYU"
      | "UZS"
      | "VEF"
      | "VND"
      | "VUV"
      | "WST"
      | "XAF"
      | "XCD"
      | "XDR"
      | "XOF"
      | "XPF"
      | "YER"
      | "ZAR"
      | "ZMW"
      | "ZWD";
    /** The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed. */
    Amount: string;
    /** Type of transaction. */
    transactionType: "TRANSFER";
    /** Memo assigned to transaction. */
    Note: string;
    transferRequest: {
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      transactionType: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      quoteRequestExtensions?: components["schemas"]["extensionListEmptiable"];
      transferRequestExtensions?: components["schemas"]["extensionListEmptiable"];
    };
    /** Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘). */
    CorrelationId: string;
    transferStatus:
      | "ERROR_OCCURRED"
      | "WAITING_FOR_PARTY_ACCEPTANCE"
      | "WAITING_FOR_QUOTE_ACCEPTANCE"
      | "COMPLETED";
    /** Data model for the complex type Money. */
    Money: {
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
    };
    /** The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC). */
    DateTime: string;
    /** The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. */
    Latitude: string;
    /** The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. */
    Longitude: string;
    /** Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated. */
    GeoCode: {
      /** Latitude of the Party. */
      latitude: components["schemas"]["Latitude"];
      /** Longitude of the Party. */
      longitude: components["schemas"]["Longitude"];
    };
    /** Information for recipient (transport layer information). */
    IlpPacket: string;
    /** Condition that must be attached to the transfer by the Payer. */
    IlpCondition: string;
    /** Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment. */
    ExtensionList: {
      /** Number of Extension elements. */
      extension: components["schemas"]["Extension"][];
    };
    /** The object sent in the PUT /quotes/{ID} callback. */
    QuotesIDPutResponse: {
      /** The amount of money that the Payee FSP should receive. */
      transferAmount: components["schemas"]["Money"];
      /** The amount of Money that the Payee should receive in the end-to-end transaction. Optional as the Payee FSP might not want to disclose any optional Payee fees. */
      payeeReceiveAmount?: components["schemas"]["Money"];
      /** Payee FSP’s part of the transaction fee. */
      payeeFspFee?: components["schemas"]["Money"];
      /** Transaction commission from the Payee FSP. */
      payeeFspCommission?: components["schemas"]["Money"];
      /** Date and time until when the quotation is valid and can be honored when used in the subsequent transaction. */
      expiration: components["schemas"]["DateTime"];
      /** Longitude and Latitude of the Payee. Can be used to detect fraud. */
      geoCode?: components["schemas"]["GeoCode"];
      /** The ILP Packet that must be attached to the transfer by the Payer. */
      ilpPacket: components["schemas"]["IlpPacket"];
      /** The condition that must be attached to the transfer by the Payer. */
      condition: components["schemas"]["IlpCondition"];
      /** Optional extension, specific to deployment. */
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** Fulfilment that must be attached to the transfer by the Payee. */
    IlpFulfilment: string;
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Next ledger has received the transfer.
     * - RESERVED - Next ledger has reserved the transfer.
     * - COMMITTED - Next ledger has successfully performed the transfer.
     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
     */
    TransferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
    /** The object sent in the PUT /transfers/{ID} callback. */
    TransfersIDPutResponse: {
      /** Fulfilment of the condition specified with the transaction. Mandatory if transfer has completed successfully. */
      fulfilment?: components["schemas"]["IlpFulfilment"];
      /** Time and date when the transaction was completed. */
      completedTimestamp?: components["schemas"]["DateTime"];
      /** State of the transfer. */
      transferState: components["schemas"]["TransferState"];
      /** Optional extension, specific to deployment. */
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error. */
    ErrorCode: string;
    /** Error description string. */
    ErrorDescription: string;
    /** Data model for the complex type ErrorInformation. */
    ErrorInformation: {
      errorCode: components["schemas"]["ErrorCode"];
      errorDescription: components["schemas"]["ErrorDescription"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    mojaloopError: {
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
    /** This object represents a Mojaloop API error received at any time during the transfer process */
    transferError: {
      /** The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
      httpStatusCode?: number;
      /** If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
      mojaloopError?: components["schemas"]["mojaloopError"];
    };
    transferResponse: {
      transferId?: components["schemas"]["CorrelationId"];
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      transactionType: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      currentState?: components["schemas"]["transferStatus"];
      quoteId?: components["schemas"]["CorrelationId"];
      quoteResponse?: components["schemas"]["QuotesIDPutResponse"];
      /** FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
      quoteResponseSource?: string;
      fulfil?: components["schemas"]["TransfersIDPutResponse"];
      /** Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter. */
      lastError?: components["schemas"]["transferError"];
    };
    errorResponse: {
      /** Error code as string. */
      statusCode?: string;
      /** Error message text. */
      message?: string;
    };
    errorTransferResponse: components["schemas"]["errorResponse"] & {
      transferState: components["schemas"]["transferResponse"];
    };
    transferStatusResponse: {
      transferId: components["schemas"]["CorrelationId"];
      currentState: components["schemas"]["transferStatus"];
      fulfil: components["schemas"]["TransfersIDPutResponse"];
    };
    transferContinuationAcceptParty: {
      acceptParty: true;
    };
    transferContinuationAcceptQuote: {
      acceptQuote: true | false;
    };
    /** Data model for the complex type 'individualTransfer'. */
    individualTransfer: {
      transferId: components["schemas"]["CorrelationId"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount?: components["schemas"]["Amount"];
      transactionType: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      extensions?: components["schemas"]["ExtensionList"];
    };
    bulkTransferRequest: {
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      bulkTransferId?: components["schemas"]["CorrelationId"];
      from: components["schemas"]["transferParty"];
      /** List of individual transfers in a bulk transfer. */
      individualTransfers: components["schemas"]["individualTransfer"][];
      extensions?: components["schemas"]["ExtensionList"];
    };
    individualTransferResult: {
      transferId?: components["schemas"]["CorrelationId"];
      to?: components["schemas"]["transferParty"];
      amountType?: components["schemas"]["AmountType"];
      currency?: components["schemas"]["Currency"];
      amount?: components["schemas"]["Amount"];
      transactionType?: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      quoteId?: components["schemas"]["CorrelationId"];
      quoteResponse?: components["schemas"]["QuotesIDPutResponse"];
      /** FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
      quoteResponseSource?: string;
      fulfil?: components["schemas"]["TransfersIDPutResponse"];
      /** Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter. */
      lastError?: components["schemas"]["transferError"];
    };
    bulkTransferResponse: {
      transferId?: components["schemas"]["CorrelationId"];
      from: components["schemas"]["transferParty"];
      /** List of individual transfer result in a bulk transfer response. */
      individualTransferResults: components["schemas"]["individualTransferResult"][];
    };
    bulkTransferErrorResponse: components["schemas"]["errorResponse"] & {
      bulkTransferState?: components["schemas"]["bulkTransferResponse"];
    };
    bulkTransferStatus: "ERROR_OCCURRED" | "COMPLETED";
    /** A Mojaloop API transfer fulfilment for individual transfers in a bulk transfer */
    individualTransferFulfilment: {
      /** Fulfilment of the condition specified with the transaction. Mandatory if transfer has completed successfully. */
      fulfilment?: components["schemas"]["IlpFulfilment"];
      /** Optional extension, specific to deployment. */
      extensionList?: components["schemas"]["ExtensionList"];
    };
    bulkTransferStatusResponse: {
      bulkTransferId: components["schemas"]["CorrelationId"];
      currentState: components["schemas"]["bulkTransferStatus"];
      fulfils: components["schemas"]["individualTransferFulfilment"][];
    };
    /** Data model for the complex type 'individualQuote'. */
    individualQuote: {
      quoteId: components["schemas"]["CorrelationId"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount?: components["schemas"]["Amount"];
      transactionType: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      extensions?: components["schemas"]["ExtensionList"];
    };
    bulkQuoteRequest: {
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      bulkQuoteId?: components["schemas"]["CorrelationId"];
      from: components["schemas"]["transferParty"];
      /** List of individual quotes in a bulk quote. */
      individualQuotes: components["schemas"]["individualQuote"][];
      extensions?: components["schemas"]["ExtensionList"];
    };
    /** This object represents a Mojaloop API error received at any time during the quote process */
    quoteError: {
      /** The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
      httpStatusCode?: number;
      /** If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
      mojaloopError?: components["schemas"]["mojaloopError"];
    };
    individualQuoteResult: {
      quoteId?: components["schemas"]["CorrelationId"];
      to?: components["schemas"]["transferParty"];
      amountType?: components["schemas"]["AmountType"];
      currency?: components["schemas"]["Currency"];
      amount?: components["schemas"]["Amount"];
      transactionType?: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      /** Object representing the last error to occur during a quote process. This may be a Mojaloop API error returned from another entity in the scheme or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter. */
      lastError?: components["schemas"]["quoteError"];
    };
    bulkQuoteResponse: {
      quoteId?: components["schemas"]["CorrelationId"];
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId?: string;
      from: components["schemas"]["transferParty"];
      /** List of individualQuoteResults in a bulk transfer response. */
      individualQuoteResults: components["schemas"]["individualQuoteResult"][];
    };
    bulkQuoteErrorResponse: components["schemas"]["errorResponse"] & {
      bulkQuoteState?: components["schemas"]["bulkQuoteResponse"];
    };
    bulkQuoteStatus: "ERROR_OCCURRED" | "COMPLETED";
    bulkQuoteStatusResponse: {
      bulkQuoteId: components["schemas"]["CorrelationId"];
      currentState: components["schemas"]["bulkQuoteStatus"];
      individualQuotes: components["schemas"]["individualQuote"][];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
     * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
     * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
     * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
     * - REFUND - Used for performing a refund of transaction.
     */
    TransactionScenario:
      | "DEPOSIT"
      | "WITHDRAWAL"
      | "TRANSFER"
      | "PAYMENT"
      | "REFUND";
    /** Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type). */
    TransactionSubScenario: string;
    /**
     * Below are the allowed values for the enumeration.
     * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
     * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
     */
    TransactionInitiator: "PAYER" | "PAYEE";
    /** Reason for the refund. */
    RefundReason: string;
    /** Data model for the complex type Refund. */
    Refund: {
      originalTransactionId: components["schemas"]["CorrelationId"];
      refundReason?: components["schemas"]["RefundReason"];
    };
    /** (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. */
    BalanceOfPayments: string;
    /** Data model for the complex type TransactionType. */
    TransactionType: {
      scenario: components["schemas"]["TransactionScenario"];
      subScenario?: components["schemas"]["TransactionSubScenario"];
      initiator: components["schemas"]["TransactionInitiator"];
      initiatorType: components["schemas"]["TransactionInitiatorType"];
      refundInfo?: components["schemas"]["Refund"];
      balanceOfPayments?: components["schemas"]["BalanceOfPayments"];
    };
    requestToPayRequest: {
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      scenario: components["schemas"]["TransactionType"];
      initiator: components["schemas"]["TransactionInitiator"];
      initiatorType: components["schemas"]["TransactionInitiatorType"];
    };
    /**
     * Below are the allowed values for the enumeration AuthenticationType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     */
    AuthenticationType: "OTP" | "QRCODE";
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
     * - PENDING - Payer FSP has sent the transaction request to the Payer.
     * - ACCEPTED - Payer has approved the transaction.
     * - REJECTED - Payer has rejected the transaction.
     */
    TransactionRequestState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
    requestToPayResponse: {
      transactionRequestId: components["schemas"]["CorrelationId"];
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      scenario?: components["schemas"]["TransactionType"];
      initiator?: components["schemas"]["TransactionInitiator"];
      initiatorType?: components["schemas"]["TransactionInitiatorType"];
      authenticationType?: components["schemas"]["AuthenticationType"];
      requestToPayState: components["schemas"]["TransactionRequestState"];
    };
    requestToPayTransferRequest: {
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      requestToPayTransactionId: string;
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      scenario: components["schemas"]["TransactionType"];
      initiator: components["schemas"]["TransactionInitiator"];
      initiatorType: components["schemas"]["TransactionInitiatorType"];
      note?: components["schemas"]["Note"];
    };
    requestToPayTransferResponse: {
      transferId?: components["schemas"]["CorrelationId"];
      /** Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      requestToPayTransactionId: string;
      from: components["schemas"]["transferParty"];
      to: components["schemas"]["transferParty"];
      amountType: components["schemas"]["AmountType"];
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
      transactionType: components["schemas"]["transactionType"];
      note?: components["schemas"]["Note"];
      currentState?: components["schemas"]["transferStatus"];
      quoteId?: components["schemas"]["CorrelationId"];
      quoteResponse?: components["schemas"]["QuotesIDPutResponse"];
      /** FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
      quoteResponseSource?: string;
      fulfil?: components["schemas"]["TransfersIDPutResponse"];
      /** Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter. */
      lastError?: components["schemas"]["transferError"];
    };
    transferContinuationAcceptOTP: {
      acceptOTP: true | false;
    };
    accountsRequest: {
      idType: components["schemas"]["PartyIdType"];
      idValue: components["schemas"]["PartyIdentifier"];
      idSubValue?: components["schemas"]["PartySubIdOrType"];
      currency: components["schemas"]["Currency"];
    }[];
    accountCreationStatus: {
      idType: components["schemas"]["PartyIdType"];
      idValue: components["schemas"]["PartyIdentifier"];
      idSubValue?: components["schemas"]["PartySubIdOrType"];
      error?: components["schemas"]["errorResponse"];
    }[];
    accountsCreationState: "ERROR_OCCURRED" | "COMPLETED";
    accountsResponse: {
      modelId?: components["schemas"]["CorrelationId"];
      accounts: components["schemas"]["accountsRequest"];
      response?: components["schemas"]["accountCreationStatus"];
      currentState?: components["schemas"]["accountsCreationState"];
      lastError?: components["schemas"]["transferError"];
    };
    errorAccountsResponse: components["schemas"]["errorResponse"] & {
      executionState: components["schemas"]["accountsResponse"];
    };
    /**
     * A long-lived unique account identifier provided by the DFSP. This MUST NOT
     * be Bank Account Number or anything that may expose a User's private bank
     * account information.
     */
    AccountAddress: string;
    /** Data model for the complex type Account. */
    Account: {
      address?: components["schemas"]["AccountAddress"];
      currency: components["schemas"]["Currency"];
      description?: components["schemas"]["Name"];
    };
    /** Data model for the complex type AccountList. */
    AccountList: {
      /** Accounts associated with the Party. */
      account: components["schemas"]["Account"][];
    };
    /** Data model for the complex type PartyIdInfo. */
    PartyIdInfo: {
      partyIdType: components["schemas"]["PartyIdType"];
      partyIdentifier: components["schemas"]["PartyIdentifier"];
      partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
      fspId?: components["schemas"]["FspId"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** Name of the Party. Could be a real name or a nickname. */
    PartyName: string;
    /** Data model for the complex type PartyComplexName. */
    PartyComplexName: {
      firstName?: components["schemas"]["FirstName"];
      middleName?: components["schemas"]["MiddleName"];
      lastName?: components["schemas"]["LastName"];
    };
    /** Data model for the complex type PartyPersonalInfo. */
    PartyPersonalInfo: {
      complexName?: components["schemas"]["PartyComplexName"];
      dateOfBirth?: components["schemas"]["DateOfBirth"];
    };
    /** Data model for the complex type Party. */
    Party: {
      accounts?: components["schemas"]["AccountList"];
      partyIdInfo: components["schemas"]["PartyIdInfo"];
      merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
      name?: components["schemas"]["PartyName"];
      personalInfo?: components["schemas"]["PartyPersonalInfo"];
    };
    async2SyncCurrentState:
      | "WAITING_FOR_ACTION"
      | "COMPLETED"
      | "ERROR_OCCURRED";
    /** The object sent in the POST /quotes request. */
    QuotesPostRequest: {
      /** Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction. */
      quoteId: components["schemas"]["CorrelationId"];
      /** Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction. */
      transactionId: components["schemas"]["CorrelationId"];
      /** Identifies an optional previously-sent transaction request. */
      transactionRequestId?: components["schemas"]["CorrelationId"];
      /** Information about the Payee in the proposed financial transaction. */
      payee: components["schemas"]["Party"];
      /** Information about the Payer in the proposed financial transaction. */
      payer: components["schemas"]["Party"];
      /** SEND for send amount, RECEIVE for receive amount. */
      amountType: components["schemas"]["AmountType"];
      /** Depending on amountType - If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities. */
      amount: components["schemas"]["Money"];
      /** The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed. */
      fees?: components["schemas"]["Money"];
      /** Type of transaction for which the quote is requested. */
      transactionType: components["schemas"]["TransactionType"];
      /** Longitude and Latitude of the initiating Party. Can be used to detect fraud. */
      geoCode?: components["schemas"]["GeoCode"];
      /** A memo that will be attached to the transaction. */
      note?: components["schemas"]["Note"];
      /** Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit. */
      expiration?: components["schemas"]["DateTime"];
      /** Optional extension, specific to deployment. */
      extensionList?: components["schemas"]["ExtensionList"];
    };
    quotesPostRequest: {
      fspId: components["schemas"]["FspId"];
      quotesPostRequest: components["schemas"]["QuotesPostRequest"];
    };
    quotesPostResponse: {
      /** The object sent in the PUT /quotes/{ID} callback. */
      quotes: {
        transferAmount: components["schemas"]["Money"];
        payeeReceiveAmount?: components["schemas"]["Money"];
        payeeFspFee?: components["schemas"]["Money"];
        payeeFspCommission?: components["schemas"]["Money"];
        /** Date and time until when the quotation is valid and can be honored when used in the subsequent transaction. */
        expiration: string;
        geoCode?: components["schemas"]["GeoCode"];
        ilpPacket: components["schemas"]["IlpPacket"];
        condition: components["schemas"]["IlpCondition"];
        extensionList?: components["schemas"]["ExtensionList"];
      };
      currentState: components["schemas"]["async2SyncCurrentState"];
    };
    errorQuotesResponse: components["schemas"]["errorResponse"] & {
      [key: string]: any;
    };
    /** The object sent in the POST /transfers request. */
    TransfersPostRequest: {
      /** The common ID between the FSPs and the optional Switch for the transfer object, decided by the Payer FSP. The ID should be reused for resends of the same transfer. A new ID should be generated for each new transfer. */
      transferId: components["schemas"]["CorrelationId"];
      /** Payee FSP in the proposed financial transaction. */
      payeeFsp: components["schemas"]["FspId"];
      /** Payer FSP in the proposed financial transaction. */
      payerFsp: components["schemas"]["FspId"];
      /** The transfer amount to be sent. */
      amount: components["schemas"]["Money"];
      /** The ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data. */
      ilpPacket: components["schemas"]["IlpPacket"];
      /** The condition that must be fulfilled to commit the transfer. */
      condition: components["schemas"]["IlpCondition"];
      /** Expiration can be set to get a quick failure expiration of the transfer. The transfer should be rolled back if no fulfilment is delivered before this time. */
      expiration: components["schemas"]["DateTime"];
      /** Optional extension, specific to deployment. */
      extensionList?: components["schemas"]["ExtensionList"];
    };
    simpleTransfersPostRequest: {
      fspId: components["schemas"]["FspId"];
      transfersPostRequest: components["schemas"]["TransfersPostRequest"];
    };
    simpleTransfersPostResponse: {
      transfer: components["schemas"]["TransfersIDPutResponse"];
      currentState: components["schemas"]["async2SyncCurrentState"];
    };
    errorSimpleTransfersResponse: components["schemas"]["errorResponse"] & {
      [key: string]: any;
    };
  };
  responses: {
    /** Transfer completed successfully */
    transferSuccess: {
      content: {
        "application/json": components["schemas"]["transferResponse"];
      };
    };
    /** Malformed or missing required body, headers or parameters */
    transferBadRequest: {
      content: {
        "application/json": components["schemas"]["errorTransferResponse"];
      };
    };
    /** An error occurred processing the transfer */
    transferServerError: {
      content: {
        "application/json": components["schemas"]["errorTransferResponse"];
      };
    };
    /** Timeout occurred processing the transfer */
    transferTimeout: {
      content: {
        "application/json": components["schemas"]["errorTransferResponse"];
      };
    };
    /** Bulk transfer completed successfully */
    bulkTransferSuccess: {
      content: {
        "application/json": components["schemas"]["bulkTransferResponse"];
      };
    };
    /** Malformed or missing required body, headers or parameters */
    bulkTransferBadRequest: {
      content: {
        "application/json": components["schemas"]["bulkTransferErrorResponse"];
      };
    };
    /** An error occurred processing the bulk transfer */
    bulkTransferServerError: {
      content: {
        "application/json": components["schemas"]["bulkTransferErrorResponse"];
      };
    };
    /** Timeout occurred processing the bulk transfer */
    bulkTransferTimeout: {
      content: {
        "application/json": components["schemas"]["bulkTransferErrorResponse"];
      };
    };
    /** Bulk quote completed successfully */
    bulkQuoteSuccess: {
      content: {
        "application/json": components["schemas"]["bulkQuoteResponse"];
      };
    };
    /** Malformed or missing required body, headers or parameters */
    bulkQuoteBadRequest: {
      content: {
        "application/json": components["schemas"]["bulkQuoteErrorResponse"];
      };
    };
    /** An error occurred processing the bulk quote */
    bulkQuoteServerError: {
      content: {
        "application/json": components["schemas"]["bulkQuoteErrorResponse"];
      };
    };
    /** Timeout occurred processing the bulk quote */
    bulkQuoteTimeout: {
      content: {
        "application/json": components["schemas"]["bulkQuoteErrorResponse"];
      };
    };
    /** Request to Pay completed successfully */
    requestToPaySuccess: {
      content: {
        "application/json": components["schemas"]["requestToPayResponse"];
      };
    };
    /** Transfer completed successfully */
    requestToPayTransferSuccess: {
      content: {
        "application/json": components["schemas"]["requestToPayTransferResponse"];
      };
    };
    /** Malformed or missing required body, headers or parameters */
    requestToPayTransferBadRequest: {
      content: {
        "application/json": components["schemas"]["errorTransferResponse"];
      };
    };
    /** Accounts creation completed */
    accountsCreationCompleted: {
      content: {
        "application/json": components["schemas"]["accountsResponse"];
      };
    };
    /** An error occurred creating accounts */
    accountsCreationError: {
      content: {
        "application/json": components["schemas"]["errorAccountsResponse"];
      };
    };
    /** Timeout occurred creating accounts */
    accountsCreationTimeout: {
      content: {
        "application/json": components["schemas"]["errorAccountsResponse"];
      };
    };
    /** PartiesByIdResponse */
    partiesByIdResponse: {
      content: {
        "application/json": {
          /** Information regarding the requested Party. */
          party: components["schemas"]["Party"];
          currentState: components["schemas"]["async2SyncCurrentState"];
        };
      };
    };
    /** PartiesByIdError404 */
    partiesByIdError404: {
      content: {
        "application/json": {
          errorInformation?: components["schemas"]["ErrorInformation"];
        };
      };
    };
    /** sync response from POST /quotes */
    quotesPostSuccess: {
      content: {
        "application/json": components["schemas"]["quotesPostResponse"];
      };
    };
    /** An error occurred processing the quotes request */
    quotesServerError: {
      content: {
        "application/json": components["schemas"]["errorQuotesResponse"];
      };
    };
    /** sync response from POST /simpleTransfers */
    simpleTransfersPostSuccess: {
      content: {
        "application/json": components["schemas"]["simpleTransfersPostResponse"];
      };
    };
    /** An error occurred processing the simple transfers request */
    simpleTransfersServerError: {
      content: {
        "application/json": components["schemas"]["errorSimpleTransfersResponse"];
      };
    };
  };
}
