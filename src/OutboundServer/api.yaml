openapi: 3.0.1
info:
  title: Mojaloop SDK Outbound Scheme Adapter API
  description: >
    Specification for the Mojaloop SDK Scheme Adapter Outbound Transfers API


    This API can be used by DFSP backends to simplify the process of sending funds to other parties within a Mojaloop scheme.


    Please see other documentation on https://github.com/mojaloop/sdk-scheme-adapter for more information.


    **Note on terminology:** The term "Switch" is equal to the term "Hub", and the term "FSP" is equal to the term "DFSP".
  license:
    name: Apache License Version 2.0, January 2004
    url: http://www.apache.org/licenses/
  version: 1.0.0
paths:
  /:
    get:
      summary: Health check endpoint
      description: This endpoint allows a user of the SDK scheme adapter to check the outbound transfers service is listening.
      tags:
        - Health
      responses:
        200:
          description: Returns empty body if the scheme adapter outbound transfers service is running.  
  /transfers:
    post:
      summary: Sends money from one account to another
      description: >
        The HTTP request `POST /transfers` is used to request the movement of funds from payer DFSP to payee DFSP.

        The underlying Mojaloop API has three stages for money transfer:

          1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
          2. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
          3. Transfer. The enactment of the previously agreed "contract"

        This method has several modes of operation.

        - If the configuration variables `AUTO_ACCEPT_PARTIES` is set to `"false"` this method will terminate when the payee party has been resolved and return the payee party details.
          If the payee wishes to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the payee party) is required to continue the operation.
          The scheme adapter will then proceed with quotation stage...

        - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
          If the payee wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete.
        Upon completion it will return the entire set of transfer details received during the operation.


        Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme
        adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...

      tags:
        - Transfers
      requestBody:
        description: Transfer request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/transferSuccess'
        400:
          $ref: '#/components/responses/transferBadRequest'
        500:
          $ref: '#/components/responses/transferServerError'
        504:
          $ref: '#/components/responses/transferTimeout'

  /transfers/{transferId}:
    put:
      summary: Continues a transfer that has paused at the quote stage in order to accept or reject payee party and/or quote
      description: >
        The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.


        The request body should contain either the "acceptParty" or "acceptQuote" property set to `true` as required to continue the transfer.


        See the description of the `POST /transfers` HTTP method for more information on modes of transfer.
      tags:
        - Transfers
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/transferContinuationAcceptParty'
                - $ref: '#/components/schemas/transferContinuationAcceptQuote'
      parameters:
        - $ref: '#/components/parameters/transferId'
      responses:
        200:
          $ref: '#/components/responses/transferSuccess'
        500:
          $ref: '#/components/responses/transferServerError'
        504:
          $ref: '#/components/responses/transferTimeout'

    get:
      summary: Retrieves information for a specific transfer
      description: The HTTP request `GET /transfers/{transferId}` is used to get information regarding a transfer created or requested earlier. The `{transferId}` in the URI should contain the `transferId` that was used for the creation of the transfer.
      tags:
        - Transfers
      parameters:
        - $ref: '#/components/parameters/transferId'
      responses:
        200:
          description: Transfer information successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferStatusResponse'
        500:
          description: An error occurred processing the transfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /bulkTransfers:
    post:
      summary: Sends money from one account to multiple accounts
      description: >
        The HTTP request `POST /bulkTransfers` is used to request the movement of funds from payer DFSP to payees' DFSP.
      tags:
        - BulkTransfers
      requestBody:
        description: Bulk transfer request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkTransferRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/bulkTransferSuccess'
        400:
          $ref: '#/components/responses/bulkTransferBadRequest'
        500:
          $ref: '#/components/responses/bulkTransferServerError'
        504:
          $ref: '#/components/responses/bulkTransferTimeout'
  
  /bulkTransfers/{bulkTransferId}:
    get:
      summary: Retrieves information for a specific bulk transfer
      description: >-
        The HTTP request `GET /bulkTransfers/{bulktTransferId}` is used to get information regarding a bulk transfer created or requested earlier. 
        The `{bulkTransferId}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer.
      tags:
        - BulkTransfers
      parameters:
        - $ref: '#/components/parameters/bulkTransferId'
      responses:
        200:
          description: Bulk transfer information successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkTransferStatusResponse'
        500:
          description: An error occurred processing the bulk transfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /bulkQuotes:
    post:
      summary: Request bulk quotes for the provided financial transactions
      description: >
        The HTTP request `POST /bulkQuotes` is used to request a bulk quote to fascilitate funds transfer from payer DFSP to payees' DFSP.
      tags:
        - BulkQuotes
      requestBody:
        description: Bulk quote request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkQuoteRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/bulkQuoteSuccess'
        400:
          $ref: '#/components/responses/bulkQuoteBadRequest'
        500:
          $ref: '#/components/responses/bulkQuoteServerError'
        504:
          $ref: '#/components/responses/bulkQuoteTimeout'

  /bulkQuotes/{bulkQuoteId}:
    get:
      summary: Retrieves information for a specific bulk quote
      description: >-
        The HTTP request `GET /bulkQuotes/{bulktQuoteId}` is used to get information regarding a bulk quote created or requested earlier. 
        The `{bulkQuoteId}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote.
      tags:
        - BulkQuotes
      parameters:
        - $ref: '#/components/parameters/bulkQuoteId'
      responses:
        200:
          description: Bulk quote information successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkQuoteStatusResponse'
        500:
          description: An error occurred processing the bulk quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /requestToPay:
    post:
      summary: Receiver requesting funds from Sender
      description: >
        The HTTP request `POST /requestToPay` is used to support Pull Funds pattern where in a receiver can request for funds from the Sender.

        The underlying API has two stages:

          1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
          2. Transaction Request. This request enables a Payee to request Payer to send electronic funds to the Payee. 
          
      tags:
        - RequestToPay
      requestBody:
        description: RequestToPay request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestToPayRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/requestToPaySuccess'
        # 400:
        #   $ref: '#/components/responses/requestToPayBadRequest'
        # 500:
        #   $ref: '#/components/responses/requestToPayServerError'
        # 504:
        #   $ref: '#/components/responses/requestToPayTimeout'

  /requestToPayTransfer:
    post:
      summary: Used to trigger funds from customer fsp account to merchant fsp account.
        This is a follow-up request to requestToPay.
      description: >
        The HTTP request `POST /requestToPayTransfer` is used to request the movement of funds from payer DFSP to payee DFSP.

        The underlying Mojaloop API has three stages for money transfer:

          1. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
          2. Authorization. This facilitates getting OTP from payee DFSP.
          3. Transfer. The enactment of the previously agreed "contract"

        This method has several modes of operation.

        - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
          If the payee wished to proceed with the otp, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        - If the configuration variable `AUTO_ACCEPT_OTP` is set to `"false"` this method will terminate and return the otp when it has been received from the payee DFSP.
          If the payer wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
          The scheme adapter will then proceed with the transfer state.

        If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete.
        Upon completion it will return the entire set of transfer details received during the operation.


        Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme
        adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...

      tags:
        - RequestToPayTransfer
      requestBody:
        description: Request To Pay Transfer request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestToPayTransferRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/requestToPayTransferSuccess'
        400:
          $ref: '#/components/responses/requestToPayTransferBadRequest'
        500:
          $ref: '#/components/responses/transferServerError'
        504:
          $ref: '#/components/responses/transferTimeout'

  /requestToPayTransfer/{requestToPayTransactionId}:
    put:
      summary: Continues a transfer that has paused at the otp stage in order to accept or reject quote
      description: >
        The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.


        The request body should contain either the "acceptOTP" or "acceptQuote" property set to `true` as required to continue the transfer.


        See the description of the `POST /requestToPayTransfer` HTTP method for more information on modes of transfer.
      tags:
        - RequestToPayTransferID
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/transferContinuationAcceptQuote'
                - $ref: '#/components/schemas/transferContinuationAcceptOTP'
      parameters:
        - $ref: '#/components/parameters/requestToPayTransactionId'
      responses:
        200:
          $ref: '#/components/responses/transferSuccess'
        500:
          $ref: '#/components/responses/transferServerError'
        504:
          $ref: '#/components/responses/transferTimeout'
        
  /accounts:
    post:
      summary:  Create accounts on the Account Lookup Service
      description: The HTTP request `POST /accounts` is used to create account information on the Account Lookup Service (ALS) regarding the provided list of identities.


        Caller DFSP is used as the account source FSP information
      tags:
        - Accounts
      requestBody:
        description: Identities list request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountsRequest'
        required: true
      responses:
        200:
          $ref: '#/components/responses/accountsCreationCompleted'
        400:
          $ref: '#/components/responses/accountsCreationError'
        500:
          $ref: '#/components/responses/accountsCreationError'
        504:
          $ref: '#/components/responses/accountsCreationTimeout'

  /parties/{Type}/{ID}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
    get:
      description: >-
        The HTTP request GET /parties// (or GET /parties///) is used to lookup
        information regarding the requested Party, defined by ,  and optionally
        (for example, GET /parties/MSISDN/123456789, or GET
        /parties/BUSINESS/shoecompany/employee1).
      summary: PartiesByTypeAndID
      tags:
        - parties
      operationId: PartiesByTypeAndID
      responses:
        '200':
          $ref: '#/components/responses/PartiesByIdResponse'
        '404':
          $ref: '#/components/responses/PartiesByIdError404'

  /parties/{Type}/{ID}/{SubId}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/SubId'
    get:
      description: >-
        The HTTP request GET /parties// (or GET /parties///) is used to lookup
        information regarding the requested Party, defined by ,  and optionally
        (for example, GET /parties/MSISDN/123456789, or GET
        /parties/BUSINESS/shoecompany/employee1).
      summary: PartiesSubIdByTypeAndID
      tags:
        - parties
      operationId: PartiesSubIdByTypeAndID
      responses:
        '200':
          $ref: '#/components/responses/PartiesByIdResponse'
        '404':
          $ref: '#/components/responses/PartiesByIdError404'

components:
  schemas:

    amountType:
      type: string
      enum:
      - SEND
      - RECEIVE
      description: SEND for send amount, RECEIVE for receive amount.

    currency:
      maxLength: 3
      minLength: 3
      type: string
      enum:
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTN
      - BWP
      - BYN
      - BZD
      - CAD
      - CDF
      - CHF
      - CLP
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GEL
      - GGP
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - IDR
      - ILS
      - IMP
      - INR
      - IQD
      - IRR
      - ISK
      - JEP
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SLL
      - SOS
      - SPL
      - SRD
      - STD
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TVD
      - TWD
      - TZS
      - UAH
      - UGX
      - USD
      - UYU
      - UZS
      - VEF
      - VND
      - VUV
      - WST
      - XAF
      - XCD
      - XDR
      - XOF
      - XPF
      - XTS
      - XXX
      - YER
      - ZAR
      - ZMW
      - ZWD

    dateOfBirth:
      type: string
      pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of birth in the form YYYY-MM-DD.

    errorResponse:
      type: object
      properties:
        statusCode:
          type: string
          description: Error code as string.
        message:
          type: string
          description: Error message text.

    errorTransferResponse:
      allOf:
        - $ref: '#/components/schemas/errorResponse'
        - type: object
          required:
            - transferState
          properties:
            transferState:
              $ref: '#/components/schemas/transferResponse'

    bulkTransferErrorResponse:
      allOf:
        - $ref: '#/components/schemas/errorResponse'
        - type: object
          required:
            - bulkTansferState
          properties:
            bulkTransferState:
              $ref: '#/components/schemas/bulkTransferResponse'

    errorAccountsResponse:
      allOf:
        - $ref: '#/components/schemas/errorResponse'
        - type: object
          required:
            - executionState
          properties:
            executionState:
              $ref: '#/components/schemas/accountsResponse'

    idType:
      type: string
      enum:
      - MSISDN
      - ACCOUNT_ID
      - EMAIL
      - PERSONAL_ID
      - BUSINESS
      - DEVICE
      - IBAN
      - ALIAS
      description: Below are the allowed values for the enumeration.

        - MSISDN -  An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.

    idValue:
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the party.

    idSubValue:
      type: string
      minLength: 1
      maxLength: 128
      description: Either a sub-identifier of a `{idValue}`, or a sub-type of the `{idType}`, normally a `{personalIdType}`

    initiator:
      type: string
      enum:
      - PAYER
      - PAYEE
      description: Who is initiating the transaction, Payer or Payee.

    initiatorType:
      type: string
      enum:
      - CONSUMER
      - AGENT
      - BUSINESS
      - DEVICE
      description: Consumer, agent, business, …

    scenario:
      type: string
      enum:
      - DEPOSIT
      - WITHDRAWAL
      - TRANSFER
      - PAYMENT
      - REFUND
      description: Deposit, Withdrawl …

    personalIdType:
      type: string
      enum:
        - PASSPORT
        - NATIONAL_REGISTRATION
        - DRIVING_LICENSE
        - ALIEN_REGISTRATION
        - NATIONAL_ID_CARD
        - EMPLOYER_ID
        - TAX_ID_NUMBER
        - SENIOR_CITIZENS_CARD
        - MARRIAGE_CERTIFICATE
        - HEALTH_CARD
        - VOTERS_ID
        - UNITED_NATIONS
        - OTHER_ID
      description: Below are the allowed values for the enumeration.

        - PASSPORT - A passport number is used in reference to a party.

        - NATIONAL_REGISTRATION - A national registration number is used in reference to a party.

        - DRIVING_LICENSE - A driving license is used in reference to a party.

        - ALIEN_REGISTRATION - An alien registration number is used in reference to a party.

        - NATIONAL_ID_CARD - A national ID card number is used in reference to a party.

        - EMPLOYER_ID - A tax identification number is used in reference to a party.

        - TAX_ID_NUMBER - A tax identification number is used in reference to a party.

        - SENIOR_CITIZENS_CARD - A senior citizens card number is used in reference to a party.

        - MARRIAGE_CERTIFICATE - A marriage certificate number is used in reference to a party.

        - HEALTH_CARD - A health card number is used in reference to a party.

        - VOTERS_ID - A voter’s identification number is used in reference to a party.

        - UNITED_NATIONS - An UN (United Nations) number is used in reference to a party.

        - OTHER_ID - Any other type of identification type number is used in reference to a party.

    money:
      pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
      type: string

    payerType:
      type: string
      enum:
      - CONSUMER
      - AGENT
      - BUSINESS
      - DEVICE

    timestamp:
      type: string
      pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: An ISO-8601 formatted timestamp.

    transactionType:
      type: string
      enum:
      - TRANSFER
      description: Type of transaction.

    transferContinuationAcceptParty:
      type: object
      required:
        - acceptParty
      properties:
        acceptParty:
          type: boolean
          enum:
            - true

    transferContinuationAcceptQuote:
      type: object
      required:
        - acceptQuote
      properties:
        acceptQuote:
          type: boolean
          enum:
            - true
            - false
    
    transferContinuationAcceptOTP:
      type: object
      required:
        - acceptOTP
      properties:
        acceptOTP:
          type: boolean
          enum:
            - true
            - false

    mojaloopIdentifier:
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      type: string
      description: A Mojaloop API identifier (UUID).

    transferParty:
      type: object
      required:
        - idType
        - idValue
      properties:
        type:
          $ref: '#/components/schemas/payerType'
        idType:
          $ref: '#/components/schemas/idType'
        idValue:
          $ref: '#/components/schemas/idValue'
        idSubValue:
          $ref: '#/components/schemas/idSubValue'
        displayName:
          type: string
          description: Display name of the sender, if known.
        firstName:
          type: string
          description: Party first name.
        middleName:
          type: string
          description: Party middle name.
        lastName:
          type: string
          description: Party last name.
        dateOfBirth:
          $ref: '#/components/schemas/dateOfBirth'
        merchantClassificationCode:
          type: string
          description: Up to 4 digits specifying the sender's merchant classification, if known and applicable.
        fspId:
          type: string
          description: FSP with which the party is associated to.

        extensionList:
          $ref: '#/components/schemas/extensionList'

    extensionItem:
      type: object
      properties:
        key:
          type: string
          minLength: 1
          maxLength: 32
        value:
          type: string
          minLength: 1
          maxLength: 128

    extensionList:
      type: array
      items:
        $ref: '#/components/schemas/extensionItem'
      minItems: 0
      maxItems: 16

    extensionListComplex:
      type: object
      description: Data model for the complex type ExtensionList
      properties:
        extension:
          type: array
          items:
            $ref: '#/components/schemas/extensionItem'
          minItems: 1
          maxItems: 16
          description: Number of Extension elements
      required:
        - extension

    transferRequest:
      type: object
      required:
        - homeTransactionId
        - from
        - to
        - amountType
        - currency
        - amount
        - transactionType
      properties:
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        quoteRequestExtensions:
          $ref: '#/components/schemas/extensionList'
        transferRequestExtensions:
          $ref: '#/components/schemas/extensionList'

    requestToPayRequest:
      type: object
      required:
        - homeTransactionId
        - from
        - to
        - amountType
        - currency
        - amount
        - scenario
        - initiator
        - initiatorType
      properties:
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        scenario:
          $ref: '#/components/schemas/scenario'
        initiator:
          $ref: '#/components/schemas/initiator'
        initiatorType:
          $ref: '#/components/schemas/initiatorType'

    requestToPayResponse:
      type: object
      required:
        - transactionRequestId
        - from
        - to
        - amountType
        - currency
        - amount
        - transactionType
        - requestToPayState
      properties:
        transactionRequestId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        scenario:
          $ref: '#/components/schemas/scenario'
        initiator:
          $ref: '#/components/schemas/initiator'
        initiatorType:
          $ref: '#/components/schemas/initiatorType'
        authenticationType:
          type: string
          description: OTP or QR Code, otherwise empty   
        requestToPayState:
          $ref: '#/components/schemas/mojaloopTransactionRequestState'     

    requestToPayTransferRequest:
      type: object
      required:
        - requestToPayTransactionId
        - from
        - to
        - amountType
        - currency
        - amount
        - scenario
        - initiator
        - initiatorType
      properties:
        requestToPayTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        scenario:
          $ref: '#/components/schemas/scenario'
        initiator:
          $ref: '#/components/schemas/initiator'
        initiatorType:
          $ref: '#/components/schemas/initiatorType'
        note:
          maxLength: 128
          type: string

    requestToPayTransferResponse:
      type: object
      required:
        - requestToPayTransactionId
        - from
        - to
        - amountType
        - currency
        - amount
        - transactionType
      properties:
        transferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        requestToPayTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        currentState:
          $ref: '#/components/schemas/transferStatus'
        quoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        quoteResponse:
          $ref: '#/components/schemas/quote'
        quoteResponseSource:
          type: string
          description: >
            FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which
            owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway.
        fulfil:
          $ref: '#/components/schemas/transferFulfilment'
        lastError:
          description: >
            Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme
            or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter.
          $ref: '#/components/schemas/transferError'


    transferResponse:
      type: object
      required:
        - homeTransactionId
        - from
        - to
        - amountType
        - currency
        - amount
        - transactionType
      properties:
        transferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        currentState:
          $ref: '#/components/schemas/transferStatus'
        quoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        quoteResponse:
          $ref: '#/components/schemas/quote'
        quoteResponseSource:
          type: string
          description: >
            FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which
            owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway.
        fulfil:
          $ref: '#/components/schemas/transferFulfilment'
        lastError:
          description: >
            Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme
            or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter.
          $ref: '#/components/schemas/transferError'

    bulkTransferResponse:
      type: object
      required:
        - from
        - individualTransferResults
      properties:
        transferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        from:
          $ref: '#/components/schemas/transferParty'
        individualTransferResults:
          type: array
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualTransferResult'
          description: List of individual transfer result in a bulk transfer response.

    transferStatusResponse:
      type: object
      required:
        - transferId
        - currentState
        - fulfil
      properties:
        transferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        currentState:
          $ref: '#/components/schemas/transferStatus'
        fulfil:
          $ref: '#/components/schemas/transferFulfilment'
    
    bulkTransferStatusResponse:
      type: object
      required:
        - bulkTransferId
        - currentState
        - fulfils
      properties:
        bulkTransferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        currentState:
          $ref: '#/components/schemas/bulkTransferStatus'
        fulfils:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualTransferFulfilment'
    
    bulkQuoteStatusResponse:
      type: object
      required:
        - bulkQuoteId
        - currentState
        - individualQuotes
      properties:
        bulkQuoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        currentState:
          $ref: '#/components/schemas/bulkQuoteStatus'
        individualQuotes:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualQuote'

    quote:
      type: object
      description: Mojaloop API response to a quote request
      properties:
        transferAmount:
          $ref: '#/components/schemas/mojaloopMoney'
          description: >
            The amount of Money that the Payer FSP should transfer to the Payee
            FSP.
        payeeReceiveAmount:
          $ref: '#/components/schemas/mojaloopMoney'
          description: >
            The amount of Money that the Payee should receive in the end-to-end
            transaction. Optional as the Payee FSP might not want to disclose
            any optional Payee fees.
        payeeFspFee:
          $ref: '#/components/schemas/mojaloopMoney'
          description: Payee FSP’s part of the transaction fee.
        payeeFspCommission:
          $ref: '#/components/schemas/mojaloopMoney'
          description: Transaction commission from the Payee FSP.
        expiration:
          $ref: '#/components/schemas/timestamp'
          description: >
            Date and time until when the quotation is valid and can be honored
            when used in the subsequent transaction.
        geoCode:
          $ref: '#/components/schemas/geoCode'
          description: Longitude and Latitude of the Payee. Can be used to detect fraud.
        ilpPacket:
          $ref: '#/components/schemas/ilpPacket'
          description: The ILP Packet that must be attached to the transfer by the Payer.
        condition:
          $ref: '#/components/schemas/ilpCondition'
          description: The condition that must be attached to the transfer by the Payer.
        extensionList:
          $ref: '#/components/schemas/extensionListComplex'
          description: 'Optional extension, specific to deployment.'
      required:
        - transferAmount
        - expiration
        - ilpPacket
        - condition

    transferFulfilment:
      type: object
      description: A Mojaloop API transfer fulfilment
      properties:
        fulfilment:
          $ref: '#/components/schemas/ilpFulfilment'
          description: >
            Fulfilment of the condition specified with the transaction.
            Mandatory if transfer has completed successfully.
        completedTimestamp:
          $ref: '#/components/schemas/timestamp'
          description: Time and date when the transaction was completed.
        transferState:
          $ref: '#/components/schemas/mojaloopTransferState'
          description: State of the transfer.
        extensionList:
          $ref: '#/components/schemas/extensionListComplex'
          description: 'Optional extension, specific to deployment.'
      required:
        - transferState

    individualTransferFulfilment:
      type: object
      description: A Mojaloop API transfer fulfilment for individual transfers in a bulk transfer
      properties:
        fulfilment:
          $ref: '#/components/schemas/ilpFulfilment'
          description: >
            Fulfilment of the condition specified with the transaction.
            Mandatory if transfer has completed successfully.
        extensionList:
          $ref: '#/components/schemas/extensionListComplex'
          description: 'Optional extension, specific to deployment.'
    
    mojaloopTransferState:
      type: string
      enum:
        - RECEIVED
        - RESERVED
        - COMMITTED
        - ABORTED
      description: >
        Below are the allowed values for the enumeration
        - RECEIVED Next ledger has received the transfer.
        - RESERVED Next ledger has reserved the transfer.
        - COMMITTED Next ledger has successfully performed the transfer.
        - ABORTED Next ledger has aborted the transfer due a rejection or failure to perform the transfer.

    mojaloopTransactionRequestState:
      title: TransactionRequestStateEnum
      type: string
      enum:
        - RECEIVED
        - PENDING
        - ACCEPTED
        - REJECTED
      description: >-
        Below are the allowed values for the enumeration - RECEIVED Payer FSP
        has received the transaction from the Payee FSP. - PENDING Payer FSP has
        sent the transaction request to the Payer. - ACCEPTED Payer has approved
        the transaction. - REJECTED Payer has rejected the transaction.

    mojaloopMoney:
      title: Money
      type: object
      description: Data model for the Mojaloop API complex type Money.
      properties:
        currency:
          $ref: '#/components/schemas/currency'
          description: Currency of the amount.
        amount:
          $ref: '#/components/schemas/money'
          description: Amount of Money.
      required:
        - currency
        - amount

    transferError:
      type: object
      description: This object represents a Mojaloop API error received at any time during the transfer process
      properties:
        httpStatusCode:
          type: integer
          description: The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response.
        mojaloopError:
          description: If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object.
          $ref: '#/components/schemas/mojaloopError'

    generalError:
      type: object
      description: This object may represent a number of different error object types and so its properties may vary significantly.

    mojaloopError:
      type: object
      properties:
        errorInformation:
          $ref: '#/components/schemas/errorInformation'

    errorInformation:
      title: ErrorInformation
      type: object
      description: A Mojaloop API error information construct.
      properties:
        errorCode:
          $ref: '#/components/schemas/errorCode'
          description: Specific error number.
        errorDescription:
          $ref: '#/components/schemas/errorDescription'
          description: Error description string.
        extensionList:
          $ref: '#/components/schemas/extensionListComplex'
          description: 'Optional list of extensions, specific to deployment.'
      required:
        - errorCode
        - errorDescription

    errorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >
        The API data type errorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represents the specific error.

    errorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.

    transferStatus:
      type: string
      enum:
      - ERROR_OCCURRED
      - WAITING_FOR_PARTY_ACCEPTANCE
      - WAITING_FOR_QUOTE_ACCEPTANCE
      - COMPLETED

    bulkTransferStatus:
      type: string
      enum:
      - ERROR_OCCURRED
      - COMPLETED

    bulkQuoteStatus:
      type: string
      enum:
      - ERROR_OCCURRED
      - COMPLETED

    geoCode:
      type: object
      description: >
        Data model for the Mojaloop API complex type GeoCode. Indicates a geographic location
      properties:
        latitude:
          $ref: '#/components/schemas/latitude'
          description: Latitude of the Party.
        longitude:
          $ref: '#/components/schemas/longitude'
          description: Longitude of the Party.
      required:
        - latitude
        - longitude

    latitude:
      type: string
      pattern: >-
        ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >
        The API data type Latitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.    
    longitude:
      type: string
      pattern: >-
        ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Longitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.    

    ilpCondition:
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Condition that must be attached to the transfer by the Payer.

    ilpFulfilment:
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Fulfilment that must be attached to the transfer by the Payee.

    ilpPacket:
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      minLength: 1
      maxLength: 32768
      description: Information for recipient (transport layer information).

    accountsCreationState:
      type: string
      enum:
      - ERROR_OCCURRED
      - COMPLETED

    accountsRequest:
      type: array
      items:
        type: object
        required:
        - idType
        - idValue
        - currency
        properties:
          idType:
            $ref: '#/components/schemas/idType'
          idValue:
            $ref: '#/components/schemas/idValue'
          idSubValue:
            $ref: '#/components/schemas/idSubValue'
          currency:
            $ref: '#/components/schemas/currency'

    accountCreationStatus:
      type: array
      items:
        type: object
        required:
        - idType
        - idValue
        properties:
          idType:
            $ref: '#/components/schemas/idType'
          idValue:
            $ref: '#/components/schemas/idValue'
          idSubValue:
            $ref: '#/components/schemas/idSubValue'
          error:
            $ref: '#/components/schemas/errorResponse'

    accountsResponse:
      type: object
      required:
        - accounts
      properties:
        modelId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        accounts:
          $ref: '#/components/schemas/accountsRequest'
        response:
          $ref: '#/components/schemas/accountCreationStatus'
        currentState:
          $ref: '#/components/schemas/accountsCreationState'
        lastError:
          $ref: '#/components/schemas/transferError'

    bulkTransferRequest:
      type: object
      required:
        - homeTransactionId
        - from
        - individualTransfers
      properties:
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        bulkTransferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        from:
          $ref: '#/components/schemas/transferParty'
        individualTransfers:
          description: List of individual transfers in a bulk transfer.
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualTransfer'
        extensions:
            $ref: '#/components/schemas/extensionList' 
    
    individualTransfer:
      title: IndividualTransfer
      type: object
      description: Data model for the complex type 'individualTransfer'.
      properties:
        transferId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        extensions:
          $ref: '#/components/schemas/extensionList'  
      required:
        - transferId
        - to
        - amountType
        - currency
        - transactionType
    
    individualTransferResult:
      type: object
      properties:
        transferId: 
          $ref: '#/components/schemas/mojaloopIdentifier'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        quoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        quoteResponse:
          $ref: '#/components/schemas/quote'
        quoteResponseSource:
          type: string
          description: >
            FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which
            owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway.
        fulfil:
          $ref: '#/components/schemas/transferFulfilment'
        lastError:
          description: >
            Object representing the last error to occur during a transfer process. This may be a Mojaloop API error returned from another entity in the scheme
            or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter.
          $ref: '#/components/schemas/transferError'

    bulkQuoteRequest:
      type: object
      required:
        - homeTransactionId
        - from
        - individualQuotes
      properties:
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        bulkQuoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        from:
          $ref: '#/components/schemas/transferParty'
        individualQuotes:
          description: List of individual quotes in a bulk quote.
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualQuote'
        extensions:
          $ref: '#/components/schemas/extensionList'
    
    individualQuote:
      title: IndividualQuote
      type: object
      description: Data model for the complex type 'individualQuote'.
      properties:
        quoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        extensions:
          $ref: '#/components/schemas/extensionList'
      required:
        - quoteId
        - to
        - amountType
        - currency
        - transactionType
    
    bulkQuoteResponse:
      type: object
      required:
        - from
        - individualQuoteResults
      properties:
        quoteId:
          $ref: '#/components/schemas/mojaloopIdentifier'
        homeTransactionId:
          type: string
          description: Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems.
        from:
          $ref: '#/components/schemas/transferParty'
        individualQuoteResults:
          type: array
          maxItems: 1000
          items:
            $ref: '#/components/schemas/individualQuoteResult'
          description: List of individualQuoteResults in a bulk transfer response.
    
    individualQuoteResult:
      type: object
      properties:
        quoteId: 
          $ref: '#/components/schemas/mojaloopIdentifier'
        to:
          $ref: '#/components/schemas/transferParty'
        amountType:
          $ref: '#/components/schemas/amountType'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/money'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        note:
          maxLength: 128
          type: string
        lastError:
          description: >
            Object representing the last error to occur during a quote process. This may be a Mojaloop API error returned from another entity in the scheme
            or an object representing other types of error e.g. exceptions that may occur inside the scheme adapter.
          $ref: '#/components/schemas/quoteError'
      
    quoteError:
      type: object
      description: This object represents a Mojaloop API error received at any time during the quote process
      properties:
        httpStatusCode:
          type: integer
          description: The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response.
        mojaloopError:
          description: If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object.
          $ref: '#/components/schemas/mojaloopError'

    bulkQuoteErrorResponse:
      allOf:
        - $ref: '#/components/schemas/errorResponse'
        - type: object
          required:
            - bulkTansferState
          properties:
            bulkQuoteState:
              $ref: '#/components/schemas/bulkQuoteResponse'

    # /parties/... schemas
    AccountList:
      title: AccountList
      type: object
      description: Data model for the complex type AccountList
      properties:
        account:
          type: array
          items:
            $ref: '#/components/schemas/Account'
          minItems: 1
          maxItems: 32
          description: Accounts associated with the Party
      required:
        - account

    Account:
      title: Account
      type: object
      description: Data model for the complex type Account
      properties:
        address:
          $ref: '#/components/schemas/AccountAddress'
          type: string
          description: Unique routable address which is DFSP specific.
        currency:
          $ref: '#/components/schemas/Currency'
          type: string
          description: Currency of the amount.
        description:
          $ref: '#/components/schemas/Name'
          type: string
          description: The name of the account.
      required:
        - address
        - currency
        - description
    AccountAddress:
      title: AccountAddress
      type: string
      description: Unique routable address which is DFSP specific.
      pattern: ^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$
      minLength: 1
      maxLength: 1023

    PartiesCurrentState:
      type: string
      enum:
        - 'WAITING_FOR_REQUEST_PARTY_INFORMATION'
        - 'COMPLETED'
        - 'ERROR_OCCURRED'
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties:
        accounts:
          $ref: '#/components/schemas/AccountList'
          description: List of accounts associated with the party containing and DFSP routable address, currency identifier and description.
        partyIdInfo:
          $ref: '#/components/schemas/PartyIdInfo'
          description: 'Party Id type, id, sub ID or type, and FSP Id.'
        merchantClassificationCode:
          $ref: '#/components/schemas/MerchantClassificationCode'
          description: >-
            Used in the context of Payee Information, where the Payee happens to
            be a merchant accepting merchant payments.
        name:
          $ref: '#/components/schemas/PartyName'
          description: 'Display name of the Party, could be a real name or a nick name.'
        personalInfo:
          $ref: '#/components/schemas/PartyPersonalInfo'
          description: >-
            Personal information used to verify identity of Party such as first,
            middle, last name and date of birth.
      required:
        - partyIdInfo

    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.

    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties:
        complexName:
          $ref: '#/components/schemas/PartyComplexName'
          description: 'First, middle and last name for the Party.'
        dateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
          description: Date of birth for the Party.

    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
          description: Party’s first name.
        middleName:
          $ref: '#/components/schemas/MiddleName'
          description: Party’s middle name.
        lastName:
          $ref: '#/components/schemas/LastName'
          description: Party’s last name.

    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: First name of the Party (Name Type).

    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Middle name of the Party (Name Type).

    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Last name of the Party (Name Type).

    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.

    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties:
        partyIdType:
          $ref: '#/components/schemas/PartyIdType'
          description: Type of the identifier.
        partyIdentifier:
          $ref: '#/components/schemas/PartyIdentifier'
          description: An identifier for the Party.
        partySubIdOrType:
          $ref: '#/components/schemas/PartySubIdOrType'
          description: A sub-identifier or sub-type for the Party.
        fspId:
          $ref: '#/components/schemas/FspId'
          description: FSP ID (if known)
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
          description: 'Optional extension, specific to deployment.'
      required:
        - partyIdType
        - partyIdentifier

    PartyIdType:
      title: PartyIdTypeEnum
      type: string
      enum:
        - MSISDN
        - EMAIL
        - PERSONAL_ID
        - BUSINESS
        - DEVICE
        - ACCOUNT_ID
        - IBAN
        - ALIAS
      description: >-
        Below are the allowed values for the enumeration - MSISDN An MSISDN
        (Mobile Station International Subscriber Directory Number, that is, the
        phone number) is used as reference to a participant. The MSISDN
        identifier should be in international format according to the ITU-T
        E.164 standard. Optionally, the MSISDN may be prefixed by a single plus
        sign, indicating the international prefix. - EMAIL An email is used as
        reference to a participant. The format of the email should be according
        to the informational RFC 3696. - PERSONAL_ID A personal identifier is
        used as reference to a participant. Examples of personal identification
        are passport number, birth certificate number, and national registration
        number. The identifier number is added in the PartyIdentifier element.
        The personal identifier type is added in the PartySubIdOrType element. -
        BUSINESS A specific Business (for example, an organization or a company)
        is used as reference to a participant. The BUSINESS identifier can be in
        any format. To make a transaction connected to a specific username or
        bill number in a Business, the PartySubIdOrType element should be used.
        - DEVICE A specific device (for example, a POS or ATM) ID connected to a
        specific business or organization is used as reference to a Party. For
        referencing a specific device under a specific business or organization,
        use the PartySubIdOrType element. - ACCOUNT_ID A bank account number or
        FSP account ID should be used as reference to a participant. The
        ACCOUNT_ID identifier can be in any format, as formats can greatly
        differ depending on country and FSP. - IBAN A bank account number or FSP
        account ID is used as reference to a participant. The IBAN identifier
        can consist of up to 34 alphanumeric characters and should be entered
        without whitespace. - ALIAS An alias is used as reference to a
        participant. The alias should be created in the FSP as an alternative
        reference to an account owner. Another example of an alias is a username
        in the FSP system. The ALIAS identifier can be in any format. It is also
        possible to use the PartySubIdOrType element for identifying an account
        under an Alias defined by the PartyIdentifier.

    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.

    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.

    Currency:
      title: CurrencyEnum
      description: >-
        The currency codes defined in ISO 4217 as three-letter alphabetic codes
        are used as the standard naming representation for currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
        - ZWD
    Name:
      title: Name
      type: string
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.
        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ). Note -  In some programming languages, Unicode
        support must be specifically enabled. For example, if Java is used the
        flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode
        characters.

    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.

    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.

    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.

    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension
      properties:
        key:
          $ref: '#/components/schemas/ExtensionKey'
          description: Extension key.
        value:
          $ref: '#/components/schemas/ExtensionValue'
          description: Extension value.
      required:
        - key
        - value
    
    ExtensionList:
      title: ExtensionList
      type: object
      description: Data model for the complex type ExtensionList
      properties:
        extension:
          type: array
          items:
            $ref: '#/components/schemas/Extension'
          minItems: 1
          maxItems: 16
          description: Number of Extension elements
      required:
        - extension

    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: '^[\d]{1,4}$'
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.

    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: Specific error number.
        errorDescription:
          $ref: '#/components/schemas/ErrorDescription'
          description: Error description string.
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
          description: 'Optional list of extensions, specific to deployment.'
      required:
        - errorCode
        - errorDescription

    ErrorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represents the specific error.

    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.

  responses:
    transferSuccess:
      description: Transfer completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transferResponse'
    transferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorTransferResponse'
    transferServerError:
      description: An error occurred processing the transfer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorTransferResponse'
    transferTimeout:
      description: Timeout occurred processing the transfer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorTransferResponse'

    bulkTransferSuccess:
      description: Bulk transfer completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkTransferResponse'
    bulkTransferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkTransferErrorResponse'
    bulkTransferServerError:
      description: An error occurred processing the bulk transfer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkTransferErrorResponse'
    bulkTransferTimeout:
      description: Timeout occurred processing the bulk transfer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkTransferErrorResponse'

    bulkQuoteSuccess:
      description: Bulk quote completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkQuoteResponse'
    bulkQuoteBadRequest:
      description: Malformed or missing required body, headers or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkQuoteErrorResponse'
    bulkQuoteServerError:
      description: An error occurred processing the bulk quote
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkQuoteErrorResponse'
    bulkQuoteTimeout:
      description: Timeout occurred processing the bulk quote
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bulkQuoteErrorResponse'

    accountsCreationCompleted:
      description: Accounts creation completed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/accountsResponse'
    accountsCreationError:
      description: An error occurred creating accounts
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorAccountsResponse'
    accountsCreationTimeout:
      description: Timeout occurred creating accounts
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorAccountsResponse'    
    requestToPaySuccess:
      description: Request to Pay completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestToPayResponse'
    requestToPayTransferSuccess:
      description: Transfer completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestToPayTransferResponse'
    requestToPayTransferBadRequest:
      description: Malformed or missing required body, headers or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorTransferResponse'

    
    PartiesByIdResponse:
      description: PartiesByIdResponse
      content: 
        application/json:
          schema:
            type: object
            description: 'GET /parties/{Type}/{ID} response object'
            properties:
              party:
                $ref: '#/components/schemas/Party'
                description: Information regarding the requested Party.
              currentState:
                $ref: '#/components/schemas/PartiesCurrentState'
            required:
              - party
              - currentState
    PartiesByIdError404:
      description: PartiesByIdError404
      content: 
        application/json:
          schema:
            type: object
            properties:
              errorInformation:
                $ref: '#/components/schemas/ErrorInformation'
  parameters:
    transferId:
      name: transferId
      in: path
      required: true
      schema:
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        type: string
      description: Identifier of the transfer to continue as returned in the response to a `POST /transfers` request.
    bulkTransferId:
      name: bulkTransferId
      in: path
      required: true
      schema:
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        type: string
      description: Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request.
    bulkQuoteId:
      name: bulkQuoteId
      in: path
      required: true
      schema:
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        type: string
      description: Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request.
    requestToPayTransactionId:
      name: requestToPayTransactionId
      in: path
      required: true
      schema:
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        type: string
      description: Identifier of the merchant request to pay transfer to continue as returned in the response to a `POST /requestToPayTransfer` request.
    ID:
      name: ID
      in: path
      required: true
      schema:
        type: string
    Type:
      name: Type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/PartyIdType'
    SubId:
      name: SubId
      in: path
      required: true
      schema:
        type: string