# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  anchore: anchore/anchore-engine@1.9.0 # Ref: https://circleci.com/developer/orbs/orb/anchore/anchore-engine
  slack: circleci/slack@4.9.3 # Ref: https://github.com/mojaloop/ci-config/tree/master/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10 # Ref: https://github.com/mojaloop/ci-config/
  gh: circleci/github-cli@2.1.0 # Ref: https://github.com/CircleCI-Public/github-cli-orb
  nx: nrwl/nx@1.6.0 # Ref: https://github.com/nrwl/nx-orb

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk --no-cache add bash
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake
  yarn config set unsafe-perm true
  yarn global add node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add aws-cli

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

defaults_export_version_from_package: &defaults_export_version_from_package
  name: Format the changelog into the github release body and get release tag
  command: |
    git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
    echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
    echo 'export RELEASE_TAG=`cat package.json | jq -r .version`' >> $BASH_ENV

defaults_configure_git: &defaults_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

defaults_configure_nvm: &defaults_configure_nvm
  name: Configure NVM
  command: |
    touch $HOME/.profile
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    echo "Installing Node version: $(cat .nvmrc)"
    nvm install $(cat .nvmrc)
    nvm alias default $(cat .nvmrc)
    nvm use $(cat .nvmrc)

defaults_environment: &defaults_environment
  # env var for nx to set main branch
  MAIN_BRANCH_NAME: master

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project
    docker:
      - image: node:16.15.0-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2204:current # Ref: https://circleci.com/developer/machine/image/ubuntu-2204

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/unplugged
            - node_modules
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies

  test-unit:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      ## TODO: figure out why jest is not installed
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Yarn dependencies
          command: yarn install --immutable
      - run:
          name: Execute build
          command: yarn run build
      - run:
          name: Execute unit tests
          command: yarn run test:unit
      - store_test_results:
          path: /home/circleci/project/
      - store_artifacts:
          path: /home/circleci/project/junit.xml

  build-local:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local"
            docker build -t ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  test-integration:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - run:
          name: Install Yarn dependencies
          command: yarn install --immutable
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      ## This shouldn't be needed as the docker image is pre-built by build-local job
      # - run:
      #     name: Build docker-compose
      #     command: |
      #       docker-compose build
      - run:
          name: Start docker-compose
          command: |
            docker-compose up -d
      - run:
          name: Wait 4 Health Services
          command: |
            yarn run wait-4-docker
      - run:
          name: Execute Build
          command: yarn run build
      - run:
          name: Execute Integration Tests
          command: |
            run_int_tests() {
              pushd /home/circleci/project/modules/$1
              yarn run start & echo $! > /tmp/sdk-scheme-adapter.pid
              sleep 10
              yarn run test:integration
              kill $(cat /tmp/sdk-scheme-adapter.pid)
              popd
              sleep 10
            }
            run_int_tests outbound-domain-event-handler
            run_int_tests outbound-command-event-handler
      ## TODO Capture results
      # - run:
      #     name: prepare test/results
      #     command: |
      #       mkdir -p test/results
      #       mv junit.xml test/results
      # - store_artifacts:
      #     path: ./test/results
      # - store_test_results:
      #     path: ./test/results

  test-func:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          name: Start docker-compose for SDK and simulators
          command: |
            cd test/func
            docker-compose up -d
      - run:
          name: Wait for some time
          command: |
            sleep 10
      - run:
          name: Execute Functional Tests
          command: |
            cd test/func
            docker-compose -f ./ttk-tests-docker-compose.yml up --abort-on-container-exit
            docker compose down
      - store_artifacts:
          path: ./test/func/reports
          prefix: test

  validate-openapi:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Validate openapi
          command: yarn run build:openapi && yarn run validate:api

  test-dependencies:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      ## TODO: Resolve cache issue to replace `Install Dependencies`
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - run:
          name: Execute dependency tests
          command: yarn run dep:check

  test-lint:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      ## TODO: Resolve cache issue to replace `Install Dependencies`
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - run:
          name: Execute lint tests
          command: yarn run lint

  vulnerability-check:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check -- -o json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results

  license-scan:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImages=mojaloop/$CIRCLE_PROJECT_REPONAME:local make run
      - store_artifacts:
          path: /tmp/license-scanner/results

  image-scan:
    executor: anchore/anchore_engine
    environment: *defaults_environment
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Setup Slack config
          command: |
            echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='GitHub Release'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG='${RELEASE_TAG} on ${CIRCLE_BRANCH} branch'" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
            echo "export SLACK_CUSTOM_MSG='Anchore Image Scan failed for: \`${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}\`'" >> $BASH_ENV
      - run:
          name: Install docker dependencies for anchore
          command: |
            apk add --update py-pip docker python3-dev libffi-dev openssl-dev gcc libc-dev make jq npm
      - run:
          name: Install general dependencies
          command: |
            apk --no-cache add git
            apk --no-cache add ca-certificates
            apk --no-cache add curl
            apk --no-cache add openssh-client
            apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake
            npm config set unsafe-perm true
            npm install -g node-gyp
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          name: Download the mojaloop/ci-config repo
          command: |
            git clone https://github.com/mojaloop/ci-config /tmp/ci-config
            # Generate the mojaloop anchore-policy
            cd /tmp/ci-config/container-scanning && ./mojaloop-policy-generator.js /tmp/mojaloop-policy.json
      - run:
          name: Pull base image locally
          command: |
            docker pull node:16.15.0-alpine
      # Analyze the base and derived image
      # Note: It seems images are scanned in parallel, so preloading the base image result doesn't give us any real performance gain
      - anchore/analyze_local_image:
          # Force the older version, version 0.7.0 was just published, and is broken
          anchore_version: v0.6.1
          image_name: "docker.io/node:16.15.0-alpine $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local"
          policy_failure: false
          timeout: '500'
          # Note: if the generated policy is invalid, this will fallback to the default policy, which we don't want!
          policy_bundle_file_path: /tmp/mojaloop-policy.json
      - run:
          name: Upload Anchore reports to s3
          command: |
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive
      - run:
          name: Evaluate failures
          command: /tmp/ci-config/container-scanning/anchore-result-diff.js anchore-reports/node_16.15.0-alpine-policy.json anchore-reports/${CIRCLE_PROJECT_REPONAME}*-policy.json
      - store_artifacts:
          path: anchore-reports
      - slack/notify:
          event: fail
          template: SLACK_TEMP_RELEASE_FAILURE

  release:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Configure git
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
      - run:
          name: Configure ssh
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: yarn run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - gh/install
      - checkout
      - run:
          <<: *defaults_configure_git
      - run:
          name: Fetch updated release branch
          command: |
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          <<: *defaults_export_version_from_package
      - run:
          name: Check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - run:
          name: Setup Slack config
          command: |
            echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='Github Release'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG=v${RELEASE_TAG}" >> $BASH_ENV
            echo "export SLACK_RELEASE_URL=https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/v${RELEASE_TAG}" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
      - run:
          name: Create Release
          command: |
            gh release create "v${RELEASE_TAG}" --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md
      - slack/notify:
          event: pass
          template: SLACK_TEMP_RELEASE_SUCCESS
      - slack/notify:
          event: fail
          template: SLACK_TEMP_RELEASE_FAILURE

  publish-docker:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Setup for LATEST release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_PROD"
            PACKAGE_VERSION=$(cat package.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
      - run:
          name: Setup Slack config
          command: |
            echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='Docker Release'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: |
            docker load -i /tmp/docker-image.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Set Image Digest
          command: |
            IMAGE_DIGEST=$(docker inspect $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:v${CIRCLE_TAG:1} | jq '.[0].RepoDigests | .[]')
            echo "IMAGE_DIGEST=${IMAGE_DIGEST}"
            echo "export IMAGE_DIGEST=${IMAGE_DIGEST}" >> $BASH_ENV
      - run:
          name: Update Slack config
          command: |
            echo "export SLACK_RELEASE_URL='https://hub.docker.com/layers/${CIRCLE_PROJECT_REPONAME}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}/v${CIRCLE_TAG:1}/images/${IMAGE_DIGEST}?context=explore'" | sed -r "s/${DOCKER_ORG}\/${CIRCLE_PROJECT_REPONAME}@sha256:/sha256-/g" >> $BASH_ENV
      - slack/notify:
          event: pass
          template: SLACK_TEMP_RELEASE_SUCCESS
      - slack/notify:
          event: fail
          template: SLACK_TEMP_RELEASE_FAILURE

  publish-docker-snapshot:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Setup for SNAPSHOT release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"
            PACKAGE_VERSION=$(cat package.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
      - run:
          name: Setup Slack config
          command: |
            echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='Docker Release'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: |
            docker load -i /tmp/docker-image.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Set Image Digest
          command: |
            IMAGE_DIGEST=$(docker inspect $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:v${CIRCLE_TAG:1} | jq '.[0].RepoDigests | .[]')
            echo "IMAGE_DIGEST=${IMAGE_DIGEST}"
            echo "export IMAGE_DIGEST=${IMAGE_DIGEST}" >> $BASH_ENV
      - run:
          name: Update Slack config
          command: |
            echo "export SLACK_RELEASE_URL='https://hub.docker.com/layers/${CIRCLE_PROJECT_REPONAME}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}/v${CIRCLE_TAG:1}/images/${IMAGE_DIGEST}?context=explore'" | sed -r "s/${DOCKER_ORG}\/${CIRCLE_PROJECT_REPONAME}@sha256:/sha256-/g" >> $BASH_ENV
      - slack/notify:
          event: pass
          template: SLACK_TEMP_RELEASE_SUCCESS
      - slack/notify:
          event: fail
          template: SLACK_TEMP_RELEASE_FAILURE

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global

      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - validate-openapi:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-dependencies:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - master
                - main

      - test-lint:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - build-local:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-integration:
          context: org-global
          requires:
            - setup
            - build-local
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-func:
          context: org-global
          requires:
            - setup
            - build-local
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - license-scan:
          context: org-global
          requires:
            - build-local
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot(\.[0-9]+)?)?(\-hotfix(\.[0-9]+)?)?(\-perf(\.[0-9]+)?)?/
            branches:
              ignore:
                - /.*/

      - image-scan:
          context: org-global
          requires:
            - build-local
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot(\.[0-9]+)?)?(\-hotfix(\.[0-9]+)?)?(\-perf(\.[0-9]+)?)?/
            branches:
              ignore:
                - /.*/

      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-lint
            - test-unit
            - test-integration
            - vulnerability-check
            - audit-licenses
            - license-scan
            - image-scan
          filters:
            branches:
              only:
                - master
                - /release\/v.*/

      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master
                - /release\/v.*/

      - publish-docker:
          context: org-global
          requires:
            - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-lint
            - test-unit
            - test-integration
            - vulnerability-check
            - audit-licenses
            - license-scan
            - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

      - publish-docker-snapshot:
          context: org-global
          requires:
            - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-lint
            - test-unit
            - test-integration
            - vulnerability-check
            - audit-licenses
            - license-scan
            - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/
